<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello, Siddhesh Kanawade here</title>
        <link>https://siddheshkanawade.github.io/posts/</link>
        <description>Recent content in Posts on Hello, Siddhesh Kanawade here</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 15 Jul 2022 22:43:56 +0530</lastBuildDate>
        <atom:link href="https://siddheshkanawade.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>GSoC: Week 5</title>
            <link>https://siddheshkanawade.github.io/posts/week5/</link>
            <pubDate>Fri, 15 Jul 2022 22:43:56 +0530</pubDate>
            
            <guid>https://siddheshkanawade.github.io/posts/week5/</guid>
            <description>Tasks: ✅ casbin-example respository multiple depencies version conflict resolve 🟩 Real-life example for Axum middleware
Outcomes casbin-example: tokio and async-std conflict resolved fix: Update tokio
axum-middleware-example: filestructure and initial db implementation
Workflow casbin-example Tokio reimport error(after resolving error in actix-casbin and actix-casbin-auth):
error[E0252]: the name `IoError` is defined multiple times --&amp;gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:20:10 | 13 | io::{BufReader, Error as IoError, ErrorKind}, | ---------------- previous import of the type `IoError` here ... 20 | io::{Error as IoError, ErrorKind}, | ^^^^^^^^^^^^^^^^-- | | | `IoError` reimported here | help: remove unnecessary import | = note: `IoError` must be defined only once in the type namespace of this module error[E0252]: the name `ErrorKind` is defined multiple times --&amp;gt; /home/siddhesh/.</description>
            <content type="html"><![CDATA[<h2 id="tasks">Tasks:</h2>
<p>✅ casbin-example respository multiple depencies version conflict resolve <br>
🟩 Real-life example for Axum middleware</p>
<h2 id="outcomes">Outcomes</h2>
<ol>
<li>
<p><strong>casbin-example:</strong> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/565baf177a3961ff49f5b8135ad8d211418e7ac0">tokio and async-std conflict resolved</a> <br>
<a href="https://github.com/casbin-rs/actix-casbin/pull/25">fix: Update tokio</a></p>
</li>
<li>
<p><strong>axum-middleware-example:</strong> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/bcdc9ddd0f32af2b7c36e0267ffb45749e585239">filestructure and initial db implementation</a></p>
</li>
</ol>
<h2 id="workflow">Workflow</h2>
<h3 id="casbin-example">casbin-example</h3>
<p>Tokio reimport error(after resolving error in actix-casbin and actix-casbin-auth):</p>
<pre tabindex="0"><code class="language-error" data-lang="error">error[E0252]: the name `IoError` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:20:10
   |
13 |     io::{BufReader, Error as IoError, ErrorKind},
   |                     ---------------- previous import of the type `IoError` here
...
20 |     io::{Error as IoError, ErrorKind},
   |          ^^^^^^^^^^^^^^^^--
   |          |
   |          `IoError` reimported here
   |          help: remove unnecessary import
   |
   = note: `IoError` must be defined only once in the type namespace of this module

error[E0252]: the name `ErrorKind` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:20:28
   |
13 |     io::{BufReader, Error as IoError, ErrorKind},
   |                                       --------- previous import of the type `ErrorKind` here
...
20 |     io::{Error as IoError, ErrorKind},
   |                            ^^^^^^^^^ `ErrorKind` reimported here
   |
   = note: `ErrorKind` must be defined only once in the type namespace of this module

error[E0252]: the name `Path` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:21:5
   |
14 |     path::Path,
   |     ---------- previous import of the type `Path` here
...
21 |     path::Path,
   |     ^^^^^^^^^^ `Path` reimported here
   |
   = note: `Path` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
21 |     path::Path as OtherPath,
   |     ~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `File` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:25:5
   |
11 |     fs::File,
   |     -------- previous import of the type `File` here
...
25 |     fs::File,
   |     ^^^^^^^^ `File` reimported here
   |
   = note: `File` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
25 |     fs::File as OtherFile,
   |     ~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `BufReader` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:26:42
   |
13 |     io::{BufReader, Error as IoError, ErrorKind},
   |          --------- previous import of the type `BufReader` here
...
26 |     io::{AsyncBufReadExt, AsyncWriteExt, BufReader},
   |                                          ^^^^^^^^^ `BufReader` reimported here
   |
   = note: `BufReader` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
26 |     io::{AsyncBufReadExt, AsyncWriteExt, BufReader as OtherBufReader},
   |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Cursor` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:13:11
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |                     ------ previous import of the type `Cursor` here
...
13 | use std::{io::Cursor, path::Path};
   |           ^^^^^^^^^^ `Cursor` reimported here
   |
   = note: `Cursor` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
13 | use std::{io::Cursor as OtherCursor, path::Path};
   |           ~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Path` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:13:23
   |
10 | use async_std::{fs::File, path::Path};
   |                           ---------- previous import of the type `Path` here
...
13 | use std::{io::Cursor, path::Path};
   |                       ^^^^^^^^^^ `Path` reimported here
   |
   = note: `Path` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
13 | use std::{io::Cursor, path::Path as OtherPath};
   |                       ~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `BufReader` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:16:36
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |          --------- previous import of the type `BufReader` here
...
16 |     AsyncBufReadExt, AsyncReadExt, BufReader, Error as IoError, ErrorKind,
   |                                    ^^^^^^^^^ `BufReader` reimported here
   |
   = note: `BufReader` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
16 |     AsyncBufReadExt, AsyncReadExt, BufReader as OtherBufReader, Error as IoError, ErrorKind,
   |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `IoError` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:16:47
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |                             ---------------- previous import of the type `IoError` here
...
16 |     AsyncBufReadExt, AsyncReadExt, BufReader, Error as IoError, ErrorKind,
   |                                               ^^^^^^^^^^^^^^^^--
   |                                               |
   |                                               `IoError` reimported here
   |                                               help: remove unnecessary import
   |
   = note: `IoError` must be defined only once in the type namespace of this module

error[E0252]: the name `ErrorKind` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:16:65
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |                                               --------- previous import of the type `ErrorKind` here
...
16 |     AsyncBufReadExt, AsyncReadExt, BufReader, Error as IoError, ErrorKind,
   |                                                                 ^^^^^^^^^-
   |                                                                 |
   |                                                                 `ErrorKind` reimported here
   |                                                                 help: remove unnecessary import
   |
   = note: `ErrorKind` must be defined only once in the type namespace of this module

error[E0252]: the name `File` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:20:5
   |
10 | use async_std::{fs::File, path::Path};
   |                 -------- previous import of the type `File` here
...
20 | use tokio::fs::File;
   |     ^^^^^^^^^^^^^^^ `File` reimported here
   |
   = note: `File` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
20 | use tokio::fs::File as OtherFile;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Path` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/model/default_model.rs:20:5
   |
17 | use async_std::path::Path;
   |     --------------------- previous import of the type `Path` here
...
20 | use std::path::Path;
   |     ^^^^^^^^^^^^^^^ `Path` reimported here
   |
   = note: `Path` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
20 | use std::path::Path as OtherPath;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `next_line` found for struct `async_std::io::Lines` in the current scope
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:66:38
   |
66 |         while let Some(line) = lines.next_line().await? {
   |                                      ^^^^^^^^^ method not found in `async_std::io::Lines&lt;async_std::io::BufReader&lt;async_std::fs::File&gt;&gt;`

error[E0599]: no method named `next_line` found for struct `async_std::io::Lines` in the current scope
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:91:38
   |
91 |         while let Some(line) = lines.next_line().await? {
   |                                      ^^^^^^^^^ method not found in `async_std::io::Lines&lt;async_std::io::BufReader&lt;async_std::fs::File&gt;&gt;`

Some errors have detailed explanations: E0252, E0599.
For more information about an error, try `rustc --explain E0252`.
error: could not compile `casbin` due to 14 previous errors
</code></pre><p>After ensuring the build compiles in the individual directories in the casbin-rs/examples, the next task in the line was to ensure that the main workspace compile successfully. From the error console it was not clear what was exactly causing the error. I figured out that the error was due to the simultanous usage of <code>tokio</code> and <code>async-std</code> feature of casbin with the help of tokio community. Initially I tried to enable async-std feature and disable tokio since there was reimport of tokio. But since actix uses tokio, there was still import of the tokio. Hence I had to enable <code>tokio-runtime</code> and disable <code>async-std-runtimes</code>.</p>
<p>Following error was encountered after resolving the above conflict:</p>
<p><img src="/img/week3n4/actixdep.png" alt="Image alt"></p>
<p><code>actix-casbin</code> had deprecated version of tokio which was causing different versions of tokio and hence had to update it. Opened a PR to do so.</p>
<h3 id="axum-middleware-example">axum-middleware-example</h3>
<p>The next task in list was to develop a real-life example using <code>axum-casbin-auth</code>. I had <code>actix-middleware-example</code> developed by Eason Chai for reference. I did some research and found following example good enough to be reproduced in Rust.</p>
<p><a href="https://medium.com/wesionary-team/authorization-in-golang-projects-using-casbin-f8fad744dae5">Authorization in Golang Projects using Casbin</a></p>
<p>I will aim to make a example capable of doing simple CRUD operations on backend.</p>
<ol>
<li>Backend: <code>Postgres</code></li>
<li><code>diesel</code> to access backend.</li>
</ol>
<p><strong>What will app do:</strong>  I aim to have a basic application based on RBAC model. I will group users into two groups: <code>doctor</code> and <code>patient</code>. As obvious it sounds, doctor will have priveledged permissions than patient.</p>
<p>The <code>rbac.conf</code> looks like:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">[request_definition]
 r = sub, obj, act

 [policy_definition]
 p = sub, obj, act

 [role_definition]
 g = _, _

 [policy_effect]
 e = some(where (p.eft == allow))

 [matchers]
 m = g(r.sub, p.sub) &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act 
</code></pre><p>The application will match the permissions from frontend to backend and will respond with appropriate response. The identification would be done via email and password.</p>
<p>The user model looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[derive(Debug, Serialize, Deserialize, Queryable)]</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#[diesel(table_name = users)]</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">User</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> id: <span style="color:#66d9ef">i32</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> username: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> email: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> password: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> role: String,
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>In this week I aimed at creating a Database, a basic filestructure, and add code templates. Following are few examples:</p>
<p>bcrypt.rs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">use</span> <span style="color:#66d9ef">crate</span>::constants;
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">use</span> bcrypt::{hash, verify, DEFAULT_COST};
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">use</span> std::env;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">hash_password</span>() {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">compare_password</span>() {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">generate_token</span>() {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">validate_token</span>() {}
</span></span></code></pre></div><p>auth.rs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">impl</span><span style="color:#f92672">&lt;</span>S, ReqBody, ResBody<span style="color:#f92672">&gt;</span> Service<span style="color:#f92672">&lt;</span>Request<span style="color:#f92672">&lt;</span>ReqBody<span style="color:#f92672">&gt;&gt;</span> <span style="color:#66d9ef">for</span> AuthMiddleware<span style="color:#f92672">&lt;</span>S<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>     S: <span style="color:#a6e22e">Service</span><span style="color:#f92672">&lt;</span>Request<span style="color:#f92672">&lt;</span>ReqBody<span style="color:#f92672">&gt;</span>, Response <span style="color:#f92672">=</span> Response<span style="color:#f92672">&lt;</span>ResBody<span style="color:#f92672">&gt;</span>, Error <span style="color:#f92672">=</span> Infallible<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">+</span> Clone
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">+</span> Send
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">+</span> <span style="color:#f92672">&#39;</span>static,
</span></span><span style="display:flex;"><span>     S::Future: Send <span style="color:#f92672">+</span> <span style="color:#f92672">&#39;</span>static,
</span></span><span style="display:flex;"><span>     ReqBody: Send <span style="color:#f92672">+</span> <span style="color:#f92672">&#39;</span>static,
</span></span><span style="display:flex;"><span>     Infallible: From<span style="color:#f92672">&lt;&lt;</span>S <span style="color:#66d9ef">as</span> Service<span style="color:#f92672">&lt;</span>Request<span style="color:#f92672">&lt;</span>ReqBody<span style="color:#f92672">&gt;&gt;&gt;</span>::Error<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>     ResBody: <span style="color:#a6e22e">HttpBody</span><span style="color:#f92672">&lt;</span>Data <span style="color:#f92672">=</span> Bytes<span style="color:#f92672">&gt;</span> <span style="color:#f92672">+</span> Send <span style="color:#f92672">+</span> <span style="color:#f92672">&#39;</span>static,
</span></span><span style="display:flex;"><span>     ResBody::Error: Into<span style="color:#f92672">&lt;</span>BoxError<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Response</span> <span style="color:#f92672">=</span> S::Response;
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Error</span> <span style="color:#f92672">=</span> S::Error;
</span></span><span style="display:flex;"><span>     <span style="color:#75715e">// `BoxFuture` is a type alias for `Pin&lt;Box&lt;dyn Future + Send + &#39;a&gt;&gt;`
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>     <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Future</span> <span style="color:#f92672">=</span> BoxFuture<span style="color:#f92672">&lt;&#39;</span>static, Result<span style="color:#f92672">&lt;</span>Self::Response, Self::Error<span style="color:#f92672">&gt;&gt;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">poll_ready</span>(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self, cx: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">mut</span> Context<span style="color:#f92672">&lt;&#39;</span>_<span style="color:#f92672">&gt;</span>) -&gt; <span style="color:#a6e22e">Poll</span><span style="color:#f92672">&lt;</span>Result<span style="color:#f92672">&lt;</span>(), Self::Error<span style="color:#f92672">&gt;&gt;</span> {
</span></span><span style="display:flex;"><span>         self.inner.poll_ready(cx)
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">call</span>(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self, <span style="color:#66d9ef">mut</span> req: <span style="color:#a6e22e">Request</span><span style="color:#f92672">&lt;</span>ReqBody<span style="color:#f92672">&gt;</span>) -&gt; <span style="color:#a6e22e">Self</span>::Future {
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">let</span> not_ready_inner <span style="color:#f92672">=</span> self.inner.clone();
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> inner <span style="color:#f92672">=</span> std::mem::replace(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self.inner, not_ready_inner);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>         <span style="color:#75715e">// IMPLEMENT LOGIC HERE
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>         Box::pin(<span style="color:#66d9ef">async</span> <span style="color:#66d9ef">move</span> {
</span></span><span style="display:flex;"><span>             inner.call(req).<span style="color:#66d9ef">await</span>
</span></span><span style="display:flex;"><span>         })
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>After setting up the user model run the <code>diesel migration generate users</code> command to generate the <code>migrations</code> file for our database. Setup the database structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> users
</span></span><span style="display:flex;"><span> (
</span></span><span style="display:flex;"><span>     id         SERIAL <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span>,
</span></span><span style="display:flex;"><span>     username   VARCHAR(<span style="color:#ae81ff">32</span>)  <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>     email      VARCHAR(<span style="color:#ae81ff">100</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>     password   VARCHAR(<span style="color:#ae81ff">200</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">role</span>       VARCHAR(<span style="color:#ae81ff">32</span>)  <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>
</span></span><span style="display:flex;"><span> );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> users
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">VALUES</span> (<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#39;John&#39;</span>, <span style="color:#e6db74">&#39;john@john.com&#39;</span>, <span style="color:#e6db74">&#39;imjohn&#39;</span>, <span style="color:#e6db74">&#39;doctor&#39;</span>);
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> users
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">VALUES</span> (<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;Sam&#39;</span>, <span style="color:#e6db74">&#39;sam@sam.com&#39;</span>, <span style="color:#e6db74">&#39;imsam&#39;</span>, <span style="color:#e6db74">&#39;patient&#39;</span>);
</span></span></code></pre></div><p><code>diesel migration run</code> to generate the schema.rs file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span>table<span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>     users (id) {
</span></span><span style="display:flex;"><span>         id -&gt; <span style="color:#a6e22e">Int4</span>,
</span></span><span style="display:flex;"><span>         username -&gt; <span style="color:#a6e22e">Varchar</span>,
</span></span><span style="display:flex;"><span>         email -&gt; <span style="color:#a6e22e">Varchar</span>,
</span></span><span style="display:flex;"><span>         password -&gt; <span style="color:#a6e22e">Varchar</span>,
</span></span><span style="display:flex;"><span>         role -&gt; <span style="color:#a6e22e">Varchar</span>,
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>Next we will connect database with out project, for this add following <code>.env</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-env" data-lang="env"><span style="display:flex;"><span>APP_HOST<span style="color:#f92672">=</span>127.0.0.1
</span></span><span style="display:flex;"><span>APP_PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>DATABASE_URL<span style="color:#f92672">=</span>postgres://postgres:postgresAdmin@127.0.0.1:5432/casbintest
</span></span><span style="display:flex;"><span>POOL_SIZE<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>HASH_ROUNDS<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>
</span></span></code></pre></div><p>Connect database with project:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">establish_connection</span>() -&gt; <span style="color:#a6e22e">PgConnection</span> {
</span></span><span style="display:flex;"><span>     dotenv().ok();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> database_url <span style="color:#f92672">=</span> env::var(<span style="color:#e6db74">&#34;DATABASE_URL&#34;</span>).expect(<span style="color:#e6db74">&#34;DATABASE_URL must be set&#34;</span>);
</span></span><span style="display:flex;"><span>     PgConnection::establish(<span style="color:#f92672">&amp;</span>database_url)
</span></span><span style="display:flex;"><span>         .expect(<span style="color:#f92672">&amp;</span>format!(<span style="color:#e6db74">&#34;Error connecting to {}&#34;</span>, database_url))
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>Now load the data from the project to database. Will do this in main.rs. After successful setup of the database, we get the following output:</p>
<p><img src="/img/week5/database.png" alt="Image alt"></p>
]]></content>
        </item>
        
        <item>
            <title>GSoC: Week 1 and 2</title>
            <link>https://siddheshkanawade.github.io/posts/week1n2/</link>
            <pubDate>Sun, 10 Jul 2022 15:35:40 +0530</pubDate>
            
            <guid>https://siddheshkanawade.github.io/posts/week1n2/</guid>
            <description>Tasks: ❎ casbin-grpc respository maintainence ✅ Integrate Axum middleware with Casbin
Workflow Casbin is provide support to Actix, Actix Web and Rocket middleware. I was assigned to</description>
            <content type="html"><![CDATA[<h3 id="tasks">Tasks:</h3>
<p>❎ casbin-grpc respository maintainence <br>
✅ Integrate Axum middleware with Casbin</p>
<h3 id="workflow">Workflow</h3>
<p>Casbin is provide support to Actix, Actix Web and Rocket middleware. I was assigned to</p>
]]></content>
        </item>
        
        <item>
            <title>GSoC: Week 3 and 4</title>
            <link>https://siddheshkanawade.github.io/posts/week3n4/</link>
            <pubDate>Sun, 10 Jul 2022 15:35:40 +0530</pubDate>
            
            <guid>https://siddheshkanawade.github.io/posts/week3n4/</guid>
            <description>Tasks: ✅ casbin-rs/example respository maintainence ✅ Add CI to axum middleware ✅ Add tests and examples to axum-casbin-auth
Outcomes casbin-rs/example: actix-fileadapter-rbac, actix-pgsql-simple, ntex-fileadapter-acl error resolved ntex-fileadapter-acl build success actix-middleware-example
Add CI in axum middleware: added workflow
Add tests and examples to axum-casbin-auth: added tests/examples for axum-casbin-auth
Workflow Casbin-rs/examples The repository had the following set of errors when ran for the first time:
error[E0252]: the name `IoError` is defined multiple times --&amp;gt; /Users/macbookair/.</description>
            <content type="html"><![CDATA[<h2 id="tasks">Tasks:</h2>
<p>✅ casbin-rs/example respository maintainence <br>
✅ Add CI to axum middleware <br>
✅ Add tests and examples to axum-casbin-auth</p>
<h2 id="outcomes">Outcomes</h2>
<ol>
<li>
<p><strong>casbin-rs/example:</strong> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/bd7097eae46694238750bf4abddfa9de5caf8134">actix-fileadapter-rbac, actix-pgsql-simple, ntex-fileadapter-acl error resolved</a> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/10069e0ddcde004c0a0916d4cf4944b8e8552fb6">ntex-fileadapter-acl build success</a> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/9dc325b5867cb9bfda1948abdd14bccc67f926f7">actix-middleware-example</a></p>
</li>
<li>
<p><strong>Add CI in axum middleware:</strong> <br>
<a href="https://github.com/casbin-rs/axum-casbin-auth/pull/1/commits/3d9b95ab9f6874373bebdff563553a6b4b8e36c5">added workflow</a></p>
</li>
<li>
<p><strong>Add tests and examples to axum-casbin-auth</strong>: <br>
<a href="https://github.com/casbin-rs/axum-casbin-auth/pull/1/commits/4205eace8d503288503cead976683daff7c4c3cb">added tests/examples for axum-casbin-auth</a></p>
</li>
</ol>
<h2 id="workflow">Workflow</h2>
<h3 id="casbin-rsexamples">Casbin-rs/examples</h3>
<p>The repository had the following set of errors when ran for the first time:</p>
<pre tabindex="0"><code class="language-error" data-lang="error">error[E0252]: the name `IoError` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:20:10
   |
13 |     io::{BufReader, Error as IoError, ErrorKind},
   |                     ---------------- previous import of the type `IoError` here
...
20 |     io::{Error as IoError, ErrorKind},
   |          ^^^^^^^^^^^^^^^^--
   |          |
   |          `IoError` reimported here
   |          help: remove unnecessary import
   |
   = note: `IoError` must be defined only once in the type namespace of this module

error[E0252]: the name `ErrorKind` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:20:28
   |
13 |     io::{BufReader, Error as IoError, ErrorKind},
   |                                       --------- previous import of the type `ErrorKind` here
...
20 |     io::{Error as IoError, ErrorKind},
   |                            ^^^^^^^^^ `ErrorKind` reimported here
   |
   = note: `ErrorKind` must be defined only once in the type namespace of this module

error[E0252]: the name `Path` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:21:5
   |
14 |     path::Path,
   |     ---------- previous import of the type `Path` here
...
21 |     path::Path,
   |     ^^^^^^^^^^ `Path` reimported here
   |
   = note: `Path` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
21 |     path::Path as OtherPath,
   |     ~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `File` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:25:5
   |
11 |     fs::File,
   |     -------- previous import of the type `File` here
...
25 |     fs::File,
   |     ^^^^^^^^ `File` reimported here
   |
   = note: `File` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
25 |     fs::File as OtherFile,
   |     ~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `BufReader` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:26:42
   |
13 |     io::{BufReader, Error as IoError, ErrorKind},
   |          --------- previous import of the type `BufReader` here
...
26 |     io::{AsyncBufReadExt, AsyncWriteExt, BufReader},
   |                                          ^^^^^^^^^ `BufReader` reimported here
   |
   = note: `BufReader` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
26 |     io::{AsyncBufReadExt, AsyncWriteExt, BufReader as OtherBufReader},
   |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Cursor` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:13:11
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |                     ------ previous import of the type `Cursor` here
...
13 | use std::{io::Cursor, path::Path};
   |           ^^^^^^^^^^ `Cursor` reimported here
   |
   = note: `Cursor` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
13 | use std::{io::Cursor as OtherCursor, path::Path};
   |           ~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Path` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:13:23
   |
10 | use async_std::{fs::File, path::Path};
   |                           ---------- previous import of the type `Path` here
...
13 | use std::{io::Cursor, path::Path};
   |                       ^^^^^^^^^^ `Path` reimported here
   |
   = note: `Path` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
13 | use std::{io::Cursor, path::Path as OtherPath};
   |                       ~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `BufReader` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:16:36
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |          --------- previous import of the type `BufReader` here
...
16 |     AsyncBufReadExt, AsyncReadExt, BufReader, Error as IoError, ErrorKind,
   |                                    ^^^^^^^^^ `BufReader` reimported here
   |
   = note: `BufReader` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
16 |     AsyncBufReadExt, AsyncReadExt, BufReader as OtherBufReader, Error as IoError, ErrorKind,
   |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `IoError` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:16:47
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |                             ---------------- previous import of the type `IoError` here
...
16 |     AsyncBufReadExt, AsyncReadExt, BufReader, Error as IoError, ErrorKind,
   |                                               ^^^^^^^^^^^^^^^^--
   |                                               |
   |                                               `IoError` reimported here
   |                                               help: remove unnecessary import
   |
   = note: `IoError` must be defined only once in the type namespace of this module

error[E0252]: the name `ErrorKind` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:16:65
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |                                               --------- previous import of the type `ErrorKind` here
...
16 |     AsyncBufReadExt, AsyncReadExt, BufReader, Error as IoError, ErrorKind,
   |                                                                 ^^^^^^^^^-
   |                                                                 |
   |                                                                 `ErrorKind` reimported here
   |                                                                 help: remove unnecessary import
   |
   = note: `ErrorKind` must be defined only once in the type namespace of this module

error[E0252]: the name `File` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:20:5
   |
10 | use async_std::{fs::File, path::Path};
   |                 -------- previous import of the type `File` here
...
20 | use tokio::fs::File;
   |     ^^^^^^^^^^^^^^^ `File` reimported here
   |
   = note: `File` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
20 | use tokio::fs::File as OtherFile;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Path` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/model/default_model.rs:20:5
   |
17 | use async_std::path::Path;
   |     --------------------- previous import of the type `Path` here
...
20 | use std::path::Path;
   |     ^^^^^^^^^^^^^^^ `Path` reimported here
   |
   = note: `Path` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
20 | use std::path::Path as OtherPath;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Compiling actix-codec v0.3.0
error[E0599]: no method named `next_line` found for struct `async_std::io::Lines` in the current scope
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:66:38
   |
66 |         while let Some(line) = lines.next_line().await? {
   |                                      ^^^^^^^^^ method not found in `async_std::io::Lines&lt;async_std::io::BufReader&lt;async_std::fs::File&gt;&gt;`

error[E0599]: no method named `next_line` found for struct `async_std::io::Lines` in the current scope
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:91:38
   |
91 |         while let Some(line) = lines.next_line().await? {
   |                                      ^^^^^^^^^ method not found in `async_std::io::Lines&lt;async_std::io::BufReader&lt;async_std::fs::File&gt;&gt;`

   Compiling h2 v0.2.7
Some errors have detailed explanations: E0252, E0599.
For more information about an error, try `rustc --explain E0252`.
error: could not compile `casbin` due to 14 previous errors
</code></pre><p>After analyzing it was found that both <code>tokio</code> and <code>async-std</code> features of casbin were enabled which should be the case. I decided compile the individual examples and then compile the rest project.</p>
<h4 id="actix-fileadapter-rbac-and-actix-pgsql-simple">actix-fileadapter-rbac and actix-pgsql-simple</h4>
<p>There was no error thrown after updating the dependencies and compiled successfully</p>
<h4 id="ntex-fileadapter-acl">ntex-fileadapter-acl</h4>
<p>All the depedencies were to the mark, but it threw following error after running <code>cargo build</code></p>
<pre tabindex="0"><code class="language-error" data-lang="error">error[E0432]: unresolved import `crate::rt::Signal`
 --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/builder.rs:8:24
  |
8 | use crate::rt::{spawn, Signal, System};
  |                        ^^^^^^ no `Signal` in `rt`

error[E0432]: unresolved import `crate::rt::tcp_connect`
 --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/test.rs:6:17
  |
6 | use crate::rt::{tcp_connect, System};
  |                 ^^^^^^^^^^^ no `tcp_connect` in `rt`

error[E0425]: cannot find function `signal` in module `crate::rt`
   --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/builder.rs:480:38
    |
480 |         if let Some(rx) = crate::rt::signal() {
    |                                      ^^^^^^ not found in `crate::rt`

error[E0425]: cannot find function `from_tcp_stream` in module `rt`
   --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/socket.rs:148:40
    |
148 |             Stream::Tcp(stream) =&gt; rt::from_tcp_stream(stream),
    |                                        ^^^^^^^^^^^^^^^ not found in `rt`
    |
help: consider importing one of these items
    |
1   | use crate::connect::net::from_tcp_stream;
    |
1   | use ntex_connect::net::from_tcp_stream;
    |
help: if you import `from_tcp_stream`, refer to it directly
    |
148 -             Stream::Tcp(stream) =&gt; rt::from_tcp_stream(stream),
148 +             Stream::Tcp(stream) =&gt; from_tcp_stream(stream),
    | 

error[E0425]: cannot find function `from_unix_stream` in module `rt`
   --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/socket.rs:150:40
    |
150 |             Stream::Uds(stream) =&gt; rt::from_unix_stream(stream),
    |                                        ^^^^^^^^^^^^^^^^ not found in `rt`
    |
help: consider importing one of these items
    |
1   | use crate::connect::net::from_unix_stream;
    |
1   | use ntex_connect::net::from_unix_stream;
    |
help: if you import `from_unix_stream`, refer to it directly
    |
150 -             Stream::Uds(stream) =&gt; rt::from_unix_stream(stream),
150 +             Stream::Uds(stream) =&gt; from_unix_stream(stream),
    | 

error[E0412]: cannot find type `Signal` in module `crate::rt`
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/mod.rs:67:23
   |
67 |     Signal(crate::rt::Signal),
   |                       ^^^^^^ not found in `crate::rt`
   |
help: there is an enum variant `crate::server::ServerCommand::Signal`; try using the variant&#39;s enum
   |
67 |     Signal(crate::server::ServerCommand),
   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0412]: cannot find type `Signal` in module `crate::rt`
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/mod.rs:91:38
   |
91 |     fn signal(&amp;self, sig: crate::rt::Signal) {
   |                                      ^^^^^^ not found in `crate::rt`
   |
help: there is an enum variant `crate::server::ServerCommand::Signal`; try using the variant&#39;s enum
   |
91 |     fn signal(&amp;self, sig: crate::server::ServerCommand) {
   |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0412, E0425, E0432.
For more information about an error, try `rustc --explain E0412`.
error: could not compile `ntex` due to 7 previous errors
</code></pre><p>After discussing with the ntex community it was found that incorrect features of <code>ntex</code> used. Entire conversation can be found <a href="https://github.com/ntex-rs/ntex/discussions/127">here</a> <code>ntex = &quot;0.5&quot;</code> was changed to <code>ntex = { version = &quot;0.5&quot;, features = [&quot;tokio&quot;] }</code>. Even after updating this, following error was thrown:</p>
<pre tabindex="0"><code class="language-error" data-lang="error">error[E0599]: no method named `app_data` found for struct `App` in the current scope
  --&gt; ntex-fileadapter-acl/src/main.rs:46:14
   |
46 |             .app_data(e.clone()) // &lt;- create app with shared state
   |              ^^^^^^^^ method not found in `App&lt;ntex::service::Identity, web::app::Filter&lt;DefaultError&gt;&gt;`
</code></pre><p>This is due to the version upgrade of ntex, resolve can be found <a href="https://github.com/casbin-rs/examples/pull/72/files#diff-63e997272b56167db79065780451a949630a1e40df2a762b297774fd2112769dL8">here</a></p>
<h4 id="actix-middleware-example">actix-middleware-example</h4>
<p>On updating the actix-web and actix-rt versions, we get the following error:</p>
<pre tabindex="0"><code class="language-error" data-lang="error">error[E0277]: the trait bound `CasbinActor&lt;CachedEnforcer&gt;: Actor` is not satisfied
  --&gt; actix-middleware-example/src/api/user.rs:34:22
   |
34 |     actor: web::Data&lt;Addr&lt;CasbinActor&lt;CachedEnforcer&gt;&gt;&gt;,
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Actor` is not implemented for `CasbinActor&lt;CachedEnforcer&gt;`
   |
   = help: the following other types implement trait `Actor`:
             Mocker&lt;T&gt;
             SyncArbiter&lt;A&gt;
note: required by a bound in `Addr`
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-0.11.1/src/address/mod.rs:77:20
   |
77 | pub struct Addr&lt;A: Actor&gt; {
   |                    ^^^^^ required by this bound in `Addr`

error[E0277]: the trait bound `CasbinActor&lt;CachedEnforcer&gt;: Actor` is not satisfied
  --&gt; actix-middleware-example/src/services/account_service.rs:24:22
   |
24 |     actor: web::Data&lt;Addr&lt;CasbinActor&lt;CachedEnforcer&gt;&gt;&gt;,
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Actor` is not implemented for `CasbinActor&lt;CachedEnforcer&gt;`
   |
   = help: the following other types implement trait `Actor`:
             Mocker&lt;T&gt;
             SyncArbiter&lt;A&gt;
note: required by a bound in `Addr`
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-0.11.1/src/address/mod.rs:77:20
   |
77 | pub struct Addr&lt;A: Actor&gt; {
   |                    ^^^^^ required by this bound in `Addr`

For more information about this error, try `rustc --explain E0277`.
error: could not compile `actix-middleware-example` due to 3 previous errors
</code></pre><p>The cargo fetches the dependency versions from the crates.io. Since the actix-casbin-auth and actix-casbin are not released in a while, hence there are two versions of some depedencies(one from actix-casbin-auth/actix-casbin and other from the Cargo.toml). Following are some examples:</p>
<p><img src="/img/week3n4/actix.png" alt="Image alt"></p>
<p><img src="/img/week3n4/actix-rt.png" alt="Image alt"></p>
<p><img src="/img/week3n4/tokio.png" alt="Image alt"></p>
<p>Overriding the dependencies resolved the version conflicts. I encountered some errors due to upgrade in the version of the dependencies but those were resolved after refering to official documents and some github discussions.</p>
<h3 id="ci-for-axum-middleware">CI for Axum middleware</h3>
<p>Adding CI to enable github actions was the next task after adding the core code for the Axum middleware. I had <code>actix-casbin-auth</code> for reference and following commands were included in the CI.yml</p>
<ul>
<li><code>cargo build --verbose</code></li>
<li><code>cargo clippy -- -D warnings</code></li>
<li><code>cargo fmt --all -- --check</code></li>
</ul>
<p>I have added <code>Swatinem/rust-cache@v1</code> in order to build from cache. More information about it can be found <a href="https://github.com/Swatinem/rust-cache">here</a></p>
<p>Following result was observed</p>
<p><img src="/img/week3n4/citest.png" alt="Image alt"></p>
<h3 id="add-tests-and-examples-to-axum-casbin-auth">Add tests and examples to axum-casbin-auth</h3>
<p>Used <code>actix-casbin-auth</code> as reference. It had three tests:</p>
<ul>
<li>test_middleware.rs: test basic middleware function</li>
<li>test_middleware_domain.rs: test middleware function with domain</li>
<li>test_set_enforcer.rs: test initializing middleware using <code>set_enforcer()</code></li>
</ul>
<p>We first implement a FakeAuthLayer which is used to insert subject and domain in <code>CasbinVals</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">call</span>(<span style="color:#f92672">&amp;</span>self, req: <span style="color:#a6e22e">ServiceRequest</span>) -&gt; <span style="color:#a6e22e">Self</span>::Future {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> svc <span style="color:#f92672">=</span> self.service.clone();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Box::pin(<span style="color:#66d9ef">async</span> <span style="color:#66d9ef">move</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> vals <span style="color:#f92672">=</span> CasbinVals {
</span></span><span style="display:flex;"><span>                subject: String::from(<span style="color:#e6db74">&#34;alice&#34;</span>),
</span></span><span style="display:flex;"><span>                domain: Option::from(String::from(<span style="color:#e6db74">&#34;domain1&#34;</span>)),
</span></span><span style="display:flex;"><span>            };
</span></span><span style="display:flex;"><span>            req.extensions_mut().insert(vals);
</span></span><span style="display:flex;"><span>            svc.call(req).<span style="color:#66d9ef">await</span>
</span></span><span style="display:flex;"><span>        })
</span></span></code></pre></div><p>Endpoints in FakeAuthLayer and Casbin are wrapped using <code>layer</code> in Axum.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> app <span style="color:#f92672">=</span> Router::new()
</span></span><span style="display:flex;"><span>        .route(<span style="color:#e6db74">&#34;/pen/1&#34;</span>, get(handler))
</span></span><span style="display:flex;"><span>        .route(<span style="color:#e6db74">&#34;/pen/2&#34;</span>, get(handler))
</span></span><span style="display:flex;"><span>        .route(<span style="color:#e6db74">&#34;/book/:id&#34;</span>, get(handler))
</span></span><span style="display:flex;"><span>        .layer(casbin_middleware)
</span></span><span style="display:flex;"><span>        .layer(FakeAuthLayer);
</span></span></code></pre></div><p>Axum web framework don&rsquo;t have its own TestClient unlike Poem and actix-web. Hence I had to use <code>axum_test_helper::TestClient</code>.
Axum test looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">use</span> axum::{response::Response, routing::get, BoxError, Router};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> axum_test_helper::TestClient;
</span></span><span style="display:flex;"><span><span style="color:#75715e">//...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> app <span style="color:#f92672">=</span> Router::new()
</span></span><span style="display:flex;"><span>        .route(<span style="color:#e6db74">&#34;/pen/1&#34;</span>, get(handler))
</span></span><span style="display:flex;"><span>        .route(<span style="color:#e6db74">&#34;/pen/2&#34;</span>, get(handler))
</span></span><span style="display:flex;"><span>        .route(<span style="color:#e6db74">&#34;/book/:id&#34;</span>, get(handler))
</span></span><span style="display:flex;"><span>        .layer(casbin_middleware) <span style="color:#75715e">// casbin_middleware preceeds FakeAuthLayer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        .layer(FakeAuthLayer);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> client <span style="color:#f92672">=</span> TestClient::new(app);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> resp_pen_1 <span style="color:#f92672">=</span> client.get(<span style="color:#e6db74">&#34;/pen/1&#34;</span>).send().<span style="color:#66d9ef">await</span>;
</span></span><span style="display:flex;"><span>    assert_eq!(resp_pen_1.status(), StatusCode::OK);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> resp_book <span style="color:#f92672">=</span> client.get(<span style="color:#e6db74">&#34;/book/2&#34;</span>).send().<span style="color:#66d9ef">await</span>;
</span></span><span style="display:flex;"><span>    assert_eq!(resp_book.status(), StatusCode::OK);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> resp_pen_2 <span style="color:#f92672">=</span> client.get(<span style="color:#e6db74">&#34;/pen/2&#34;</span>).send().<span style="color:#66d9ef">await</span>;
</span></span><span style="display:flex;"><span>    assert_eq!(resp_pen_2.status(), StatusCode::FORBIDDEN);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Github repository of axum-casbin-auth can be found <a href="https://github.com/casbin-rs/axum-casbin-auth">here</a></p>
<h3 id="target-for-next-week">Target for Next week</h3>
<ol>
<li>casbin-rs/examples: resolve error due to simultaneous use of <code>tokio</code> and <code>async-std</code> \</li>
<li>Establish a real world example using axum-casbin-auth.</li>
</ol>
]]></content>
        </item>
        
    </channel>
</rss>
