<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello, Siddhesh Kanawade here</title>
        <link>https://siddheshkanawade.github.io/posts/</link>
        <description>Recent content in Posts on Hello, Siddhesh Kanawade here</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 19 Aug 2022 19:41:19 +0530</lastBuildDate>
        <atom:link href="https://siddheshkanawade.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>GSoC: Work Summary till now</title>
            <link>https://siddheshkanawade.github.io/posts/summ/</link>
            <pubDate>Fri, 19 Aug 2022 19:41:19 +0530</pubDate>
            
            <guid>https://siddheshkanawade.github.io/posts/summ/</guid>
            <description>Work Summary till Now Last Updated: 19th August 2022
Task Accomplishment till now Task Description Task Status Time Devoted casbin-grpc The casbin-grpc repository was not maintained in a while and had incomplete code. So I was supposed to maintain the repository. Given to another contributor, I took on to develop axum-casbin-auth. Devoted some time to understand the repository and what is required to do 1 week axum-casbin-auth Implement axum web framework(middleware) with casbin.</description>
            <content type="html"><![CDATA[<h2 id="work-summary-till-now">Work Summary till Now</h2>
<p>Last Updated: 19th August 2022</p>
<h3 id="task-accomplishment-till-now">Task Accomplishment till now</h3>
<table>
<thead>
<tr>
<th style="text-align:center">Task</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Task Status</th>
<th style="text-align:center">Time Devoted</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">casbin-grpc</td>
<td style="text-align:center">The casbin-grpc repository was not maintained in a while and had incomplete code. So I was supposed to maintain the repository.</td>
<td style="text-align:center">Given to another contributor, I took on to develop axum-casbin-auth. Devoted some time to understand the repository and what is required to do</td>
<td style="text-align:center">1 week</td>
</tr>
<tr>
<td style="text-align:center">axum-casbin-auth</td>
<td style="text-align:center">Implement axum web framework(middleware) with casbin. Its a access control middleware for axum framework</td>
<td style="text-align:center">Completed</td>
<td style="text-align:center">2.5 Weeks</td>
</tr>
<tr>
<td style="text-align:center">casbin-rs/examples</td>
<td style="text-align:center">The examples repository was not updated since, I had to update the dependencies and resolve the upcoming errors. Also, there is reimport of tokio which I need to resolve</td>
<td style="text-align:center">Completed</td>
<td style="text-align:center">1.5 week</td>
</tr>
<tr>
<td style="text-align:center">axum-middleware-example</td>
<td style="text-align:center">Develop a real-world example using axum-casbin-auth</td>
<td style="text-align:center">Completed</td>
<td style="text-align:center">2.5 weeks</td>
</tr>
<tr>
<td style="text-align:center">casbin-grpc</td>
<td style="text-align:center">Make casbin-grpc compile and run</td>
<td style="text-align:center">The another contributor withdrawn from the GSoC program and hence this task was reassigned to me. ONGOING</td>
<td style="text-align:center">1.5 weeks(still on going)</td>
</tr>
</tbody>
</table>
<h3 id="pr-count">PR count</h3>
<h4 id="casbin-rsaxum-casbin-auth">casbin-rs/axum-casbin-auth</h4>
<ol>
<li><a href="https://github.com/casbin-rs/axum-casbin-auth/pull/1">feat: Axum Middleware Integration</a>: <br>
Task accomplished by this PR: <br>
<input checked="" disabled="" type="checkbox"> Axum middleware <br>
<input checked="" disabled="" type="checkbox"> Write tests for Axum middleware example \</li>
</ol>
<p>Total Lines of code modified: <strong>+792 -1</strong> <br>
Total Commits: <strong>9</strong> <br>
Status: <strong>MERGED</strong></p>
<h4 id="casbin-rsexamples">casbin-rs/examples</h4>
<ol>
<li><a href="https://github.com/casbin-rs/examples/pull/72">fix: Update dependencies, ensure build success and add axum-middleware-example</a>
Task accomplished by this PR: <br>
<input checked="" disabled="" type="checkbox"> Update dependencies to their latest version. solved <a href="https://github.com/casbin-rs/examples/pull/71">#71</a> <br>
<input checked="" disabled="" type="checkbox"> Both tokio and async-std features of casbin are enabled, disable one to ensure casbin compile successfully<br>
<input checked="" disabled="" type="checkbox"> Make <code>actix-fileadapter-rbac</code> compile successfully after updating the dependencies <br>
<input checked="" disabled="" type="checkbox"> Remove the actix component version conflict and successfully compile <code>actix-middleware-example</code> <br>
<input checked="" disabled="" type="checkbox"> Remove the deprecated calls after updating dependencies and successfully compile <code>ntex-fileadapter-acl</code> <br>
<input checked="" disabled="" type="checkbox"> Add <code>axum-middleware-example</code>
<input checked="" disabled="" type="checkbox"> Make clippy happy \</li>
</ol>
<p>Total Lines of code modified: <strong>+1,204 âˆ’76</strong> <br>
Total Commits: <strong>19</strong> <br>
Status: <strong>UNDER REVIEW</strong></p>
<ol start="2">
<li><a href="https://github.com/casbin-rs/actix-casbin/pull/25">fix: Update tokio</a></li>
</ol>
<p>Total Lines of code modified: <strong>+3 -3</strong> <br>
Total Commits: <strong>2</strong> <br>
Status: <strong>MERGED</strong></p>
<ol start="3">
<li><a href="https://github.com/casbin-rs/actix-casbin-auth/pull/36">fix: corrected the readme file</a></li>
</ol>
<p>Total Lines of code modified: <strong>+2 -4</strong> <br>
Total Commits: <strong>3</strong> <br>
Status: <strong>MERGED</strong></p>
<h4 id="casbin-rsgrpc">casbin-rs/grpc</h4>
<ol>
<li><a href="https://github.com/casbin-rs/casbin-grpc/pull/9">fix: Make casbin-grpc run</a>
Task accomplished by this PR: <br>
<input checked="" disabled="" type="checkbox"> Update prost, tonic, make new proto.rs <br>
<input checked="" disabled="" type="checkbox"> Management apis, functions under <code>rpc_calls.rs</code> were not implemented <br>
<input disabled="" type="checkbox"> Resolve enforcer(m, a) <br>
<input disabled="" type="checkbox"> Resolve abac policy input logic and enforce(params) error <br>
<input disabled="" type="checkbox"> Reference and borrow errors in rpc_calls.rs \</li>
</ol>
<p>Total Lines of code modified: <strong>+2,056 âˆ’3,797</strong> <br>
Total Commits: <strong>5</strong> <br>
Status: <strong>DRAFT</strong>(Ongoing)</p>
<h3 id="summary">Summary</h3>
<p>Total PRs: <strong>5</strong> <br>
Total Commits: <strong>38</strong> <br>
Total Weeks: <strong>9+</strong> <br>
Total Lines of Code changed: <strong>+4057 -3881</strong></p>
]]></content>
        </item>
        
        <item>
            <title>GSoC: Week 8 and 9</title>
            <link>https://siddheshkanawade.github.io/posts/week8n9/</link>
            <pubDate>Fri, 05 Aug 2022 01:14:22 +0530</pubDate>
            
            <guid>https://siddheshkanawade.github.io/posts/week8n9/</guid>
            <description>Duration 1st August - 14th August 2022
Tasks: âœ… Axum real-world example:
âœ… add register, delete and update api services âœ… make clippy happy âœ… Merge poem-todo âœ… Ensure all checks pass in Github Actions ðŸŸ© casbin-grpc:
âœ… Management apis ðŸŸ© Resolve error in enforcer.rs, adapter.rs ðŸŸ© Ensure all checks pass in Github Actions Outcomes axum-middleware-example
register, update, delete services added make clippy happy, remove unnecessary commands formatting, clippy happy in poem-todo normalize::TrailingSlash-&amp;gt;TrailingSlash</description>
            <content type="html"><![CDATA[<h2 id="duration">Duration</h2>
<p><strong>1st August - 14th August 2022</strong></p>
<h2 id="tasks">Tasks:</h2>
<p>âœ… Axum real-world example:</p>
<ol>
<li>âœ… add register, delete and update api services</li>
<li>âœ… make clippy happy</li>
<li>âœ… Merge poem-todo</li>
<li>âœ… Ensure all checks pass in Github Actions</li>
</ol>
<p>ðŸŸ© casbin-grpc:</p>
<ol>
<li>âœ… Management apis</li>
<li>ðŸŸ© Resolve error in enforcer.rs, adapter.rs</li>
<li>ðŸŸ© Ensure all checks pass in Github Actions</li>
</ol>
<h2 id="outcomes">Outcomes</h2>
<p><strong>axum-middleware-example</strong><br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/02200c50187a5be76eadde72ef38d4fe0ee4f3a6">register, update, delete services added</a> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/dcdd94fee90a727417c54cb86704b655dc4b9e6c">make clippy happy, remove unnecessary commands</a> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/657b826311a6b92acbe47bfad1cb0ba50c9d115e">formatting, clippy happy in poem-todo</a> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/90c6c75d6f60f823412ea500e1df28c67545f019">normalize::TrailingSlash-&gt;TrailingSlash</a></p>
<p><strong>casbin-grpc</strong><br>
<a href="https://github.com/casbin-rs/casbin-grpc/pull/7/commits/835e3236061b645a7dfe35966fdca0a700488d73">management apis</a></p>
<h2 id="workflow">Workflow</h2>
<h3 id="axum-middleware-example">axum-middleware-example</h3>
<ol>
<li><strong>Add register, delete and update user api services:</strong></li>
</ol>
<p>api/user.rs</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">async</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">register</span>(
</span></span><span style="display:flex;"><span>     Json(reg_form): <span style="color:#a6e22e">Json</span><span style="color:#f92672">&lt;</span>AddUser<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>     pool: <span style="color:#a6e22e">Extension</span><span style="color:#f92672">&lt;</span>Pool<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>     Extension(enforcer): <span style="color:#a6e22e">Extension</span><span style="color:#f92672">&lt;</span>Arc<span style="color:#f92672">&lt;</span>RwLock<span style="color:#f92672">&lt;</span>CachedEnforcer<span style="color:#f92672">&gt;&gt;&gt;</span>,
</span></span><span style="display:flex;"><span> ) -&gt; <span style="color:#a6e22e">Response</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> user <span style="color:#f92672">=</span> reg_form;
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">match</span> user::register(user, <span style="color:#f92672">&amp;</span>pool, enforcer).<span style="color:#66d9ef">await</span> {
</span></span><span style="display:flex;"><span>         Ok(message) <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>             Json(ResponseBody::new(<span style="color:#f92672">&amp;</span>message, constants::EMPTY)).into_response()
</span></span><span style="display:flex;"><span>         }
</span></span><span style="display:flex;"><span>         Err(_) <span style="color:#f92672">=&gt;</span> (
</span></span><span style="display:flex;"><span>             StatusCode::INTERNAL_SERVER_ERROR,
</span></span><span style="display:flex;"><span>             constants::MESSAGE_NEW_USER_ADD_PERMISSION_ERROR.to_string(),
</span></span><span style="display:flex;"><span>         )
</span></span><span style="display:flex;"><span>             .into_response(),
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>Above is the simple function which outputs the Json response if user::register executes without error. Here we wrap CachedEnforcer into Rwlock, since enforcer is not thread-safe.</p>
<p>service/user.rs</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">async</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">register</span>(
</span></span><span style="display:flex;"><span>     user: <span style="color:#a6e22e">AddUser</span>,
</span></span><span style="display:flex;"><span>     Extension(pool): <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">Extension</span><span style="color:#f92672">&lt;</span>Pool<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>     enforcer: <span style="color:#a6e22e">Arc</span><span style="color:#f92672">&lt;</span>RwLock<span style="color:#f92672">&lt;</span>CachedEnforcer<span style="color:#f92672">&gt;&gt;</span>,
</span></span><span style="display:flex;"><span> ) -&gt; Result<span style="color:#f92672">&lt;</span>String, ServiceError<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> username <span style="color:#f92672">=</span> user.clone().username;
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> email <span style="color:#f92672">=</span> user.clone().email;
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> clone_role <span style="color:#f92672">=</span> user.role.clone();
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> g_policies <span style="color:#f92672">=</span> vec![username.clone(), clone_role.to_string()];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#75715e">// CHECK IF USER IS ALREADY PRESENT
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>     <span style="color:#66d9ef">if</span> User::get_user_by_email(<span style="color:#f92672">&amp;</span>email, <span style="color:#f92672">&amp;</span>pool.get().unwrap()).is_err() {
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">match</span> enforcer
</span></span><span style="display:flex;"><span>             .write()
</span></span><span style="display:flex;"><span>             .<span style="color:#66d9ef">await</span>
</span></span><span style="display:flex;"><span>             .add_named_grouping_policy(<span style="color:#f92672">&amp;</span><span style="color:#e6db74">&#34;g&#34;</span>, g_policies)
</span></span><span style="display:flex;"><span>             .<span style="color:#66d9ef">await</span>
</span></span><span style="display:flex;"><span>         {
</span></span><span style="display:flex;"><span>             Ok(_) <span style="color:#f92672">=&gt;</span> info<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Preset policies(p) add successfully&#34;</span>),
</span></span><span style="display:flex;"><span>             Err(err) <span style="color:#f92672">=&gt;</span> error<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Preset policies(g) add error: {}&#34;</span>, err.to_string()),
</span></span><span style="display:flex;"><span>         };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">match</span> User::register(user, <span style="color:#f92672">&amp;</span>pool.get().unwrap()) {
</span></span><span style="display:flex;"><span>             Ok(message) <span style="color:#f92672">=&gt;</span> Ok(message),
</span></span><span style="display:flex;"><span>             Err(message) <span style="color:#f92672">=&gt;</span> Err(ServiceError::new(
</span></span><span style="display:flex;"><span>                 StatusCode::INTERNAL_SERVER_ERROR,
</span></span><span style="display:flex;"><span>                 message,
</span></span><span style="display:flex;"><span>             )),
</span></span><span style="display:flex;"><span>         }
</span></span><span style="display:flex;"><span>     } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>         Err(ServiceError::new(
</span></span><span style="display:flex;"><span>             StatusCode::INTERNAL_SERVER_ERROR,
</span></span><span style="display:flex;"><span>             constants::MESSAGE_NEW_USER_ADD_PERMISSION_ERROR.to_string(),
</span></span><span style="display:flex;"><span>         ))
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>Here, first its checked whether the user is already present or not. If user isn&rsquo;t already present, then update the grouping policy in casbin-rules and then update the user in users table. Here grouping policy is present as vector and enforced using CachedEnforcer wrapped inside Rwlock.</p>
<p>model/user.rs</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">register</span>(user: <span style="color:#a6e22e">AddUser</span>, conn: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">Connection</span>) -&gt; Result<span style="color:#f92672">&lt;</span>String, String<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">if</span> Self::get_user_by_email(<span style="color:#f92672">&amp;</span>user.email, conn).is_err() {
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">let</span> hashed_pwd <span style="color:#f92672">=</span> hash_password(<span style="color:#f92672">&amp;</span>user.password).unwrap();
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">let</span> user_upd <span style="color:#f92672">=</span> AddUser {
</span></span><span style="display:flex;"><span>                 password: <span style="color:#a6e22e">hashed_pwd</span>,
</span></span><span style="display:flex;"><span>                 <span style="color:#f92672">..</span>user
</span></span><span style="display:flex;"><span>             };
</span></span><span style="display:flex;"><span>             diesel::insert_into(users)
</span></span><span style="display:flex;"><span>                 .values(<span style="color:#f92672">&amp;</span>user_upd)
</span></span><span style="display:flex;"><span>                 .execute(conn)
</span></span><span style="display:flex;"><span>                 .map_err(<span style="color:#f92672">|</span>e<span style="color:#f92672">|</span> e.to_string())<span style="color:#f92672">?</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>             Ok(constants::MESSAGE_SIGNUP_SUCCESS.to_string())
</span></span><span style="display:flex;"><span>         } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>             Err(format!(<span style="color:#e6db74">&#34;User {} is already registered&#34;</span>, <span style="color:#f92672">&amp;</span>user.username))
</span></span><span style="display:flex;"><span>         }
</span></span><span style="display:flex;"><span>     }
</span></span></code></pre></div><p>In order to update user information to users table, above function is called in register at service/user.rs. If user is not present, then hash the password using <code>hash_password()</code> and pass this parameter along with others to users table using <code>diesel</code>.</p>
<ol start="2">
<li><strong>Make clippy happy, formatting</strong>
There were multiple unused lifetimes in the <code>actix-middleware-example</code> like Insertable, AsChangeset, etc. These were necessary to insert values to tables located at database and hence removing them won&rsquo;t be a choice. Hence used <code>#![allow(clippy::extra_unused_lifetimes)]</code> to ignore them.</li>
</ol>
<p><code>cargo clippy --fix</code> =&gt; Automatically applied clippy suggestions to some extent.
<code>cargo fmt </code> =&gt; To check formatting of the code.</p>
<p>Till now <code>poem-todo</code> was merged in master branch of the repository and hence I had to pull the changes, resolve the minor conflict and make clippy happy in it.</p>
<ol start="3">
<li><strong>Ensure all checks pass in Github Actions:</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span> <span style="color:#66d9ef">use</span> actix_web::middleware::normalize::TrailingSlash;
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">|</span>                            <span style="color:#f92672">^^^^^^^^^</span> private module
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>note: <span style="color:#a6e22e">the</span> module <span style="color:#960050;background-color:#1e0010">`</span>normalize<span style="color:#960050;background-color:#1e0010">`</span> is defined here
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">-</span>-&gt; <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>runner<span style="color:#f92672">/</span>.cargo<span style="color:#f92672">/</span>registry<span style="color:#f92672">/</span>src<span style="color:#f92672">/</span>github.com<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>ecc6299db9ec823<span style="color:#f92672">/</span>actix<span style="color:#f92672">-</span>web<span style="color:#f92672">-</span><span style="color:#ae81ff">4.1.0</span><span style="color:#f92672">/</span>src<span style="color:#f92672">/</span>middleware<span style="color:#f92672">/</span><span style="color:#66d9ef">mod</span>.rs:<span style="color:#ae81ff">10</span>:<span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">10</span> <span style="color:#f92672">|</span> <span style="color:#66d9ef">mod</span> normalize;
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">|</span> <span style="color:#f92672">^^^^^^^^^^^^^^</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For more information about this error, <span style="color:#66d9ef">try</span> <span style="color:#960050;background-color:#1e0010">`</span>rustc <span style="color:#f92672">--</span>explain E0603<span style="color:#960050;background-color:#1e0010">`</span>.
</span></span><span style="display:flex;"><span>error: <span style="color:#a6e22e">could</span> not compile <span style="color:#960050;background-color:#1e0010">`</span>actix<span style="color:#f92672">-</span>middleware<span style="color:#f92672">-</span>example<span style="color:#960050;background-color:#1e0010">`</span> due to previous error
</span></span></code></pre></div><p>After the successfull completion of the real life example using axum-middleware, I was yet to figure out how to resolve this error. Also, this error couldn&rsquo;t be reproduced in ubuntu 20.04(due to compiler, not sure though). After some research I figured out that this was due to the upgrade in actix-web version and was removed by updating <code>normalize::TrailingSlash-&gt;TrailingSlash</code>.</p>
<p>Output:
<img src="/img/week8/examples.png" alt="Image alt"></p>
<h3 id="casbin-grpc">casbin-grpc</h3>
<h3 id="casbin-openraft">casbin-openraft</h3>
<h2 id="please-take-a-note">PLEASE TAKE A NOTE</h2>
<p>From 2nd August 2022, my college has started and hence most of my contributions would be in last five days of the week since I have more free time there. I can still devote around 25-30 hours per week.</p>
<h2 id="next-week-target">Next Week target</h2>
]]></content>
        </item>
        
        <item>
            <title>GSoC: Week 7</title>
            <link>https://siddheshkanawade.github.io/posts/week7/</link>
            <pubDate>Sat, 30 Jul 2022 01:08:39 +0530</pubDate>
            
            <guid>https://siddheshkanawade.github.io/posts/week7/</guid>
            <description>Duration 25th July - 31st July 2022
Tasks: ðŸŸ© Axum real-world example:
âœ… Define routes and api calls. âœ… Draft logic for auth.rs(middleware) âœ… Define structure of main.rs and enforce policies in backend Outcomes axum-middleware-example
api, middleware, routes csv utils, main.rs, server setup
Workflow Define routes and api calls Following functions were to be implemented to make the api calls:
signin() {} register() {} delete_user() {} get_user() {} get_all_user() {} In this week, I was able to draft signin, get_user and get_all_user functions.</description>
            <content type="html"><![CDATA[<h2 id="duration">Duration</h2>
<p><strong>25th July - 31st July 2022</strong></p>
<h2 id="tasks">Tasks:</h2>
<p>ðŸŸ© Axum real-world example:</p>
<ol>
<li>âœ… Define routes and api calls.</li>
<li>âœ… Draft logic for auth.rs(middleware)</li>
<li>âœ… Define structure of main.rs and enforce policies in backend</li>
</ol>
<h2 id="outcomes">Outcomes</h2>
<p><strong>axum-middleware-example</strong><br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/f9bfe55fe38cbfc1f1583f18141c622811dedf68">api, middleware, routes</a> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/25ef1cdec4efb2fed7e60254c27dd9d4ea84830e">csv utils, main.rs, server setup</a></p>
<h2 id="workflow">Workflow</h2>
<h3 id="define-routes-and-api-calls">Define routes and api calls</h3>
<p>Following functions were to be implemented to make the api calls:</p>
<ol>
<li>signin() {}</li>
<li>register() {}</li>
<li>delete_user() {}</li>
<li>get_user() {}</li>
<li>get_all_user() {}</li>
</ol>
<p>In this week, I was able to draft signin, get_user and get_all_user functions. In register and delete_user function I have to update the changes to both <code>casbin-rules</code> and <code>users</code> table in psql database.</p>
<p>Following is the code snippet for <code>POST(api/auth/signin)</code> request:</p>
<p>api/user.rs</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">async</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">signin</span>(
</span></span><span style="display:flex;"><span>     Json(login_form): <span style="color:#a6e22e">Json</span><span style="color:#f92672">&lt;</span>LoginForm<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>     pool: <span style="color:#a6e22e">Extension</span><span style="color:#f92672">&lt;</span>Pool<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span> ) -&gt; <span style="color:#a6e22e">Response</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#75715e">// output should be a json response
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>     <span style="color:#66d9ef">match</span> user::signin(login_form, <span style="color:#f92672">&amp;</span>pool) {
</span></span><span style="display:flex;"><span>         Ok(token_res) <span style="color:#f92672">=&gt;</span> Json(ResponseBody::new(
</span></span><span style="display:flex;"><span>             constants::MESSAGE_SIGNIN_SUCCESS,
</span></span><span style="display:flex;"><span>             token_res,
</span></span><span style="display:flex;"><span>         ))
</span></span><span style="display:flex;"><span>         .into_response(),
</span></span><span style="display:flex;"><span>         Err(_) <span style="color:#f92672">=&gt;</span> (
</span></span><span style="display:flex;"><span>             StatusCode::INTERNAL_SERVER_ERROR,
</span></span><span style="display:flex;"><span>             constants::MESSAGE_INTERNAL_SERVER_ERROR.to_string(),
</span></span><span style="display:flex;"><span>         )
</span></span><span style="display:flex;"><span>             .into_response(),
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>This matches the response with <code>signin</code> functions defined under <code>service/user.rs</code>. On failure, it returns the Error response as shown above. Unlike actix-web, where we get <code>web::Json&lt;Data&gt;</code>, we have to use <code>Json</code> extractor as shown above in axum.</p>
<p>service/user.rs</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">signin</span>(
</span></span><span style="display:flex;"><span>     login: <span style="color:#a6e22e">LoginForm</span>,
</span></span><span style="display:flex;"><span>     Extension(pool): <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">Extension</span><span style="color:#f92672">&lt;</span>Pool<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span> ) -&gt; Result<span style="color:#f92672">&lt;</span>TokenBodyResponse, ServiceError<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">match</span> User::signin(login, <span style="color:#f92672">&amp;</span>pool.get().unwrap()) {
</span></span><span style="display:flex;"><span>         Some(logged_user) <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">match</span> serde_json::from_value(
</span></span><span style="display:flex;"><span>                 json<span style="color:#f92672">!</span>({ <span style="color:#e6db74">&#34;token&#34;</span>: <span style="color:#a6e22e">UserToken</span>::generate_token(logged_user), <span style="color:#e6db74">&#34;token_type&#34;</span>: <span style="color:#e6db74">&#34;bearer&#34;</span> }),
</span></span><span style="display:flex;"><span>             ) {
</span></span><span style="display:flex;"><span>                 Ok(token_res) <span style="color:#f92672">=&gt;</span> Ok(token_res),
</span></span><span style="display:flex;"><span>                 Err(_) <span style="color:#f92672">=&gt;</span> Err(ServiceError::new(
</span></span><span style="display:flex;"><span>                     StatusCode::INTERNAL_SERVER_ERROR,
</span></span><span style="display:flex;"><span>                     constants::MESSAGE_INTERNAL_SERVER_ERROR.to_string(),
</span></span><span style="display:flex;"><span>                 )),
</span></span><span style="display:flex;"><span>             }
</span></span><span style="display:flex;"><span>         }
</span></span><span style="display:flex;"><span>         None <span style="color:#f92672">=&gt;</span> Err(ServiceError::new(
</span></span><span style="display:flex;"><span>             StatusCode::INTERNAL_SERVER_ERROR,
</span></span><span style="display:flex;"><span>             constants::MESSAGE_SIGNIN_FAILED.to_string(),
</span></span><span style="display:flex;"><span>         )),
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p><code>logged_user</code> is the LoginForm of the user, which contains user name, role, and login_session. For some logged user, we generate the token and in case there is no logged user, we simply return an error. In axum we need to extract the user data using <code>Extension(T): Extension&lt;T&gt;</code> unlike actix, where it provides the <code>web::Data(T)</code>.</p>
<p>model/user.rs</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">signin</span>(login: <span style="color:#a6e22e">LoginForm</span>, conn: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">Connection</span>) -&gt; Option<span style="color:#f92672">&lt;</span>LoginInfo<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> Ok(user_to_verify) <span style="color:#f92672">=</span> users
</span></span><span style="display:flex;"><span>             .filter(email.eq(<span style="color:#f92672">&amp;</span>login.email))
</span></span><span style="display:flex;"><span>             .get_result::<span style="color:#f92672">&lt;</span>User<span style="color:#f92672">&gt;</span>(conn)
</span></span><span style="display:flex;"><span>         {
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">if</span> <span style="color:#f92672">!</span>user_to_verify.password.is_empty()
</span></span><span style="display:flex;"><span>                 <span style="color:#f92672">&amp;&amp;</span> compare_password(<span style="color:#f92672">&amp;</span>login.password, <span style="color:#f92672">&amp;</span>user_to_verify.password).unwrap()
</span></span><span style="display:flex;"><span>             {
</span></span><span style="display:flex;"><span>                 <span style="color:#66d9ef">let</span> login_session_str <span style="color:#f92672">=</span> User::generate_login_session();
</span></span><span style="display:flex;"><span>                 <span style="color:#66d9ef">if</span> User::update_login_session_to_db(
</span></span><span style="display:flex;"><span>                     <span style="color:#f92672">&amp;</span>user_to_verify.email,
</span></span><span style="display:flex;"><span>                     <span style="color:#f92672">&amp;</span>login_session_str,
</span></span><span style="display:flex;"><span>                     conn,
</span></span><span style="display:flex;"><span>                 ) {
</span></span><span style="display:flex;"><span>                     <span style="color:#66d9ef">return</span> Some(LoginInfo {
</span></span><span style="display:flex;"><span>                         username: <span style="color:#a6e22e">user_to_verify</span>.username,
</span></span><span style="display:flex;"><span>                         role: <span style="color:#a6e22e">user_to_verify</span>.role,
</span></span><span style="display:flex;"><span>                         login_session: <span style="color:#a6e22e">login_session_str</span>,
</span></span><span style="display:flex;"><span>                     });
</span></span><span style="display:flex;"><span>                 }
</span></span><span style="display:flex;"><span>             }
</span></span><span style="display:flex;"><span>         }
</span></span><span style="display:flex;"><span>         None
</span></span><span style="display:flex;"><span>     }
</span></span></code></pre></div><p>Above function implements the main logic to signin the user, it calls helper function from utils to compare the password from database and updates the login_session to the database.</p>
<p>Similar to the above, we have following api calls: <br>
POST(api/auth/register) <br>
DELETE(api/admin/{:id}) <br>
GET(api/user/{:id}) <br>
GET(api/users) <br>
PUT(api/admin/{:id})</p>
<h3 id="draft-logic-for-authrsmiddleware">Draft logic for auth.rs(middleware)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span>         <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> authenticate_pass: <span style="color:#66d9ef">bool</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> authenticate_username: String <span style="color:#f92672">=</span> String::from(<span style="color:#e6db74">&#34;&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>         <span style="color:#75715e">// Bypass account routes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>         <span style="color:#66d9ef">let</span> headers <span style="color:#f92672">=</span> req.headers_mut();
</span></span><span style="display:flex;"><span>         headers.append(
</span></span><span style="display:flex;"><span>             HeaderName::from_static(<span style="color:#e6db74">&#34;content-length&#34;</span>),
</span></span><span style="display:flex;"><span>             HeaderValue::from_static(<span style="color:#e6db74">&#34;true&#34;</span>),
</span></span><span style="display:flex;"><span>         );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">if</span> Method::OPTIONS <span style="color:#f92672">==</span> <span style="color:#f92672">*</span>req.method() {
</span></span><span style="display:flex;"><span>             authenticate_pass <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>         } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">for</span> ignore_route <span style="color:#66d9ef">in</span> constants::IGNORE_ROUTES.iter() {
</span></span><span style="display:flex;"><span>                 <span style="color:#66d9ef">if</span> req.uri().path().starts_with(ignore_route) {
</span></span><span style="display:flex;"><span>                     authenticate_pass <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>                     <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>                 }
</span></span><span style="display:flex;"><span>             }
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">if</span> <span style="color:#f92672">!</span>authenticate_pass {
</span></span><span style="display:flex;"><span>                 <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> Some(pool) <span style="color:#f92672">=</span> req.extensions().get::<span style="color:#f92672">&lt;</span>Extension<span style="color:#f92672">&lt;</span>Pool<span style="color:#f92672">&gt;&gt;</span>() {
</span></span><span style="display:flex;"><span>                     info<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Connecting to database...&#34;</span>);
</span></span><span style="display:flex;"><span>                     <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> Some(auth_header) <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>                         req.headers().get(constants::AUTHORIZATION)
</span></span><span style="display:flex;"><span>                     {
</span></span><span style="display:flex;"><span>                         info<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Parsing authorization header...&#34;</span>);
</span></span><span style="display:flex;"><span>                         <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> Ok(auth_str) <span style="color:#f92672">=</span> auth_header.to_str() {
</span></span><span style="display:flex;"><span>                             <span style="color:#66d9ef">if</span> auth_str.starts_with(<span style="color:#e6db74">&#34;bearer&#34;</span>)
</span></span><span style="display:flex;"><span>                                 <span style="color:#f92672">||</span> auth_str.starts_with(<span style="color:#e6db74">&#34;Bearer&#34;</span>)
</span></span><span style="display:flex;"><span>                             {
</span></span><span style="display:flex;"><span>                                 info<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Parsing token...&#34;</span>);
</span></span><span style="display:flex;"><span>                                 <span style="color:#66d9ef">let</span> token <span style="color:#f92672">=</span> auth_str[<span style="color:#ae81ff">6</span><span style="color:#f92672">..</span>auth_str.len()].trim();
</span></span><span style="display:flex;"><span>                                 <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> Ok(token_data) <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>                                     token_utils::decode_token(token.to_string())
</span></span><span style="display:flex;"><span>                                 {
</span></span><span style="display:flex;"><span>                                     info<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Decoding token...&#34;</span>);
</span></span><span style="display:flex;"><span>                                     <span style="color:#66d9ef">if</span> token_utils::validate_token(<span style="color:#f92672">&amp;</span>token_data, pool)
</span></span><span style="display:flex;"><span>                                         .is_ok()
</span></span><span style="display:flex;"><span>                                     {
</span></span><span style="display:flex;"><span>                                         info<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Valid token&#34;</span>);
</span></span><span style="display:flex;"><span>                                         authenticate_username <span style="color:#f92672">=</span> token_data.claims.user_name;
</span></span><span style="display:flex;"><span>                                         authenticate_pass <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>                                     } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                                         error<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Invalid token&#34;</span>);
</span></span><span style="display:flex;"><span>                                     }
</span></span><span style="display:flex;"><span>                                 }
</span></span><span style="display:flex;"><span>                             }
</span></span><span style="display:flex;"><span>                         }
</span></span><span style="display:flex;"><span>                     }
</span></span><span style="display:flex;"><span>                 }
</span></span><span style="display:flex;"><span>             }
</span></span><span style="display:flex;"><span>         }
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">if</span> authenticate_pass {
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">let</span> vals <span style="color:#f92672">=</span> CasbinVals {
</span></span><span style="display:flex;"><span>                 subject: <span style="color:#a6e22e">authenticate_username</span>,
</span></span><span style="display:flex;"><span>                 domain: None,
</span></span><span style="display:flex;"><span>             };
</span></span><span style="display:flex;"><span>             req.extensions_mut().insert(vals);
</span></span><span style="display:flex;"><span>             Box::pin(<span style="color:#66d9ef">async</span> <span style="color:#66d9ef">move</span> { 
</span></span><span style="display:flex;"><span>                 Ok(inner.call(req).<span style="color:#66d9ef">await</span><span style="color:#f92672">?</span>.map(body::boxed))
</span></span><span style="display:flex;"><span>              })
</span></span><span style="display:flex;"><span>         } <span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span>             Box::pin(<span style="color:#66d9ef">async</span> <span style="color:#66d9ef">move</span>{
</span></span><span style="display:flex;"><span>                 Ok(Json(ResponseBody::new(constants::MESSAGE_TOKEN_MISSING, constants::EMPTY)).into_response())
</span></span><span style="display:flex;"><span>             })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>         }
</span></span></code></pre></div><p>Above is the logic implemented for the auth.rs, which is supposed to respond to the request in this case. It basically bypass some account routes which are present in Constants.rs and does token validation(token is extracted from request headers) using <code>validate_token</code> for the routes which couldn&rsquo;t be bypassed.</p>
<p>Ignore routes:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">const</span> IGNORE_ROUTES: [<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">str</span>; <span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>     <span style="color:#e6db74">&#34;api/auth/register&#34;</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#e6db74">&#34;api/auth/signin&#34;</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#e6db74">&#34;api/users&#34;</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#e6db74">&#34;api/user&#34;</span>,
</span></span><span style="display:flex;"><span> ];
</span></span></code></pre></div><h3 id="define-structure-of-mainrs-and-enforce-policies-in-backend">Define structure of main.rs and enforce policies in backend</h3>
<p>The basic skeleton of the main.rs should look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// EXTRACT DATA FROM .env FILE TO GET app_host, app_url, pool_size, app_port, app_database
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// READ .csv FILE AND ADD/ENFORCE THE POLICIES IN casbin-rules TABLE
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// IMPLEMENT CASBIN MIDDLEWARE
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// SET ROUTES USING axum::Router
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// HOST THE SERVER
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>} 
</span></span></code></pre></div><p><strong>Extract data from .env file</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span> dotenv::dotenv().expect(<span style="color:#e6db74">&#34;Failed to read .env file, please add it&#34;</span>);
</span></span><span style="display:flex;"><span>     std::env::set_var(<span style="color:#e6db74">&#34;RUST_LOG&#34;</span>, <span style="color:#e6db74">&#34;actix_web=debug&#34;</span>);
</span></span><span style="display:flex;"><span>     env_logger::init();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> app_host <span style="color:#f92672">=</span> env::var(<span style="color:#e6db74">&#34;APP_HOST&#34;</span>).expect(<span style="color:#e6db74">&#34;APP_HOST must be set.&#34;</span>);
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> app_port <span style="color:#f92672">=</span> env::var(<span style="color:#e6db74">&#34;APP_PORT&#34;</span>).expect(<span style="color:#e6db74">&#34;APP_PORT must be set.&#34;</span>);
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> app_url <span style="color:#f92672">=</span> format!(<span style="color:#e6db74">&#34;{}:{}&#34;</span>, <span style="color:#f92672">&amp;</span>app_host, <span style="color:#f92672">&amp;</span>app_port);
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> database_url <span style="color:#f92672">=</span> std::env::var(<span style="color:#e6db74">&#34;DATABASE_URL&#34;</span>).expect(<span style="color:#e6db74">&#34;DATABASE_URL must be set&#34;</span>);
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> pool_size: <span style="color:#66d9ef">u32</span> <span style="color:#f92672">=</span> std::env::var(<span style="color:#e6db74">&#34;POOL_SIZE&#34;</span>)
</span></span><span style="display:flex;"><span>         .ok()
</span></span><span style="display:flex;"><span>         .and_then(<span style="color:#f92672">|</span>s<span style="color:#f92672">|</span> s.parse().ok())
</span></span><span style="display:flex;"><span>         .unwrap_or(<span style="color:#ae81ff">8</span>);
</span></span></code></pre></div><p><code>.env</code> file looks like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-.env" data-lang=".env"><span style="display:flex;"><span>APP_HOST<span style="color:#f92672">=</span>127.0.0.1
</span></span><span style="display:flex;"><span>APP_PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>DATABASE_URL<span style="color:#f92672">=</span>postgres://postgres:postgresAdmin@127.0.0.1:5432/casbintest
</span></span><span style="display:flex;"><span>POOL_SIZE<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>HASH_ROUNDS<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span> 
</span></span></code></pre></div><p><strong>Enforce Policies</strong></p>
<p>There are preset policies defined in <code>.csv</code> file and they are needed to be added to the backend(using diesel adapter) before we start the operation of the application. We read them using the <code>csv utils</code> as vector and add them to casbin-rules using <code>enforcer.add_policy()</code>. It is important to classify the read vector into <code>p</code>(policy) and <code>g</code>(named_grouping_policy), hence a conditional is implemented which separates them.</p>
<p>Following code helps in understanding how policies are added to casbin-rules table</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> preset_rules <span style="color:#f92672">=</span> load_csv(walk_csv(<span style="color:#e6db74">&#34;.&#34;</span>));
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">for</span> <span style="color:#66d9ef">mut</span> policy <span style="color:#66d9ef">in</span> preset_rules {
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">let</span> ptype <span style="color:#f92672">=</span> policy.remove(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">if</span> ptype.starts_with(<span style="color:#e6db74">&#39;p&#39;</span>) {
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">match</span> clone_enforcer.write().<span style="color:#66d9ef">await</span>.add_policy(policy).<span style="color:#66d9ef">await</span> {
</span></span><span style="display:flex;"><span>                 Ok(_) <span style="color:#f92672">=&gt;</span> info<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Present policies(p) added successfully&#34;</span>),
</span></span><span style="display:flex;"><span>                 Err(err) <span style="color:#f92672">=&gt;</span> error<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Present policies(p) add error: {}&#34;</span>, err.to_string()),
</span></span><span style="display:flex;"><span>             };
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>         } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> ptype.starts_with(<span style="color:#e6db74">&#39;g&#39;</span>) {
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">match</span> clone_enforcer
</span></span><span style="display:flex;"><span>                 .write()
</span></span><span style="display:flex;"><span>                 .<span style="color:#66d9ef">await</span>
</span></span><span style="display:flex;"><span>                 .add_named_grouping_policy(<span style="color:#f92672">&amp;</span>ptype, policy)
</span></span><span style="display:flex;"><span>                 .<span style="color:#66d9ef">await</span>
</span></span><span style="display:flex;"><span>             {
</span></span><span style="display:flex;"><span>                 Ok(_) <span style="color:#f92672">=&gt;</span> info<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Preset policies(g) added successfully&#34;</span>),
</span></span><span style="display:flex;"><span>                 Err(err) <span style="color:#f92672">=&gt;</span> error<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Preset policies(g) add error: {}&#34;</span>, err.to_string()),
</span></span><span style="display:flex;"><span>             }
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>         } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>             unreachable!()
</span></span><span style="display:flex;"><span>         }
</span></span><span style="display:flex;"><span>     }
</span></span></code></pre></div><p><strong>Set Routes and host server</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> app <span style="color:#f92672">=</span> Router::new()
</span></span><span style="display:flex;"><span>         .layer(Extension(pool.clone()))
</span></span><span style="display:flex;"><span>         .layer(Extension(clone_enforcer))
</span></span><span style="display:flex;"><span>         .route(<span style="color:#e6db74">&#34;/api/auth/register&#34;</span>, post(user_api::register))
</span></span><span style="display:flex;"><span>         .route(<span style="color:#e6db74">&#34;/api/auth/signin&#34;</span>, post(user_api::signin))
</span></span><span style="display:flex;"><span>         .route(<span style="color:#e6db74">&#34;/api/users&#34;</span>, get(user_api::get_all_user))
</span></span><span style="display:flex;"><span>         .route(<span style="color:#e6db74">&#34;/api/user/:id&#34;</span>, get(user_api::get_user))
</span></span><span style="display:flex;"><span>         .route(<span style="color:#e6db74">&#34;/api/admin/:id&#34;</span>, put(user_api::update_user))
</span></span><span style="display:flex;"><span>         .route(<span style="color:#e6db74">&#34;/api/admin/:id&#34;</span>, delete(user_api::delete_user))
</span></span><span style="display:flex;"><span>         .layer(casbin_middleware.clone())
</span></span><span style="display:flex;"><span>         .layer(middleware::auth::AuthLayer);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     axum::Server::bind(<span style="color:#f92672">&amp;</span>app_url.parse().unwrap())
</span></span><span style="display:flex;"><span>         .serve(app.into_make_service())
</span></span><span style="display:flex;"><span>         .<span style="color:#66d9ef">await</span>
</span></span><span style="display:flex;"><span>         .unwrap();
</span></span></code></pre></div><p>Server is hosted at <code>127.0.0.1/8080</code></p>
<h2 id="next-week-target">Next Week target</h2>
<ol>
<li>Add remaining api commands, make clippy happy, resolve any present error.</li>
<li>Start with casbin-openraft</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>GSoC: Midterm Evaluation</title>
            <link>https://siddheshkanawade.github.io/posts/mideval/</link>
            <pubDate>Tue, 26 Jul 2022 10:15:17 +0530</pubDate>
            
            <guid>https://siddheshkanawade.github.io/posts/mideval/</guid>
            <description>Midterm Evaluation Dates: 25th July, 2022 to 29th July, 2022
Contribution/Task Accomplishment till now Task Description Task Status Estimated/Required Time casbin-grpc The casbin-grpc repository was not maintained in a while and had incomplete code. So I was supposed to maintain the repository. Given to another contributor, I took on to develop axum-casbin-auth. Devoted some time to understand the repository and what is required to do 1 week axum-casbin-auth Implement axum web framework(middleware) with casbin.</description>
            <content type="html"><![CDATA[<h2 id="midterm-evaluation">Midterm Evaluation</h2>
<p><strong>Dates</strong>: 25th July, 2022 to 29th July, 2022</p>
<h3 id="contributiontask-accomplishment-till-now">Contribution/Task Accomplishment till now</h3>
<table>
<thead>
<tr>
<th style="text-align:center">Task</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Task Status</th>
<th style="text-align:center">Estimated/Required Time</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">casbin-grpc</td>
<td style="text-align:center">The casbin-grpc repository was not maintained in a while and had incomplete code. So I was supposed to maintain the repository.</td>
<td style="text-align:center">Given to another contributor, I took on to develop axum-casbin-auth. Devoted some time to understand the repository and what is required to do</td>
<td style="text-align:center">1 week</td>
</tr>
<tr>
<td style="text-align:center">axum-casbin-auth</td>
<td style="text-align:center">Implement axum web framework(middleware) with casbin. Its a access control middleware for axum framework</td>
<td style="text-align:center">Completed</td>
<td style="text-align:center">2.5 Weeks</td>
</tr>
<tr>
<td style="text-align:center">casbin-rs/examples</td>
<td style="text-align:center">The examples repository was not updated since, I had to update the dependencies and resolve the upcoming errors. Also, there is reimport of tokio which I need to resolve</td>
<td style="text-align:center">Completed</td>
<td style="text-align:center">1-1.5 week</td>
</tr>
<tr>
<td style="text-align:center">axum-middleware-example</td>
<td style="text-align:center">Develop a real-world example using axum-casbin-auth</td>
<td style="text-align:center">Ongoing</td>
<td style="text-align:center">2.5 weeks</td>
</tr>
</tbody>
</table>
]]></content>
        </item>
        
        <item>
            <title>GSoC: Week 6</title>
            <link>https://siddheshkanawade.github.io/posts/week6/</link>
            <pubDate>Sun, 24 Jul 2022 23:57:50 +0530</pubDate>
            
            <guid>https://siddheshkanawade.github.io/posts/week6/</guid>
            <description>Tasks: ðŸŸ© Axum real-world example.
Outcomes axum-middleware-example
utils, user model, user service
Workflow Define Service Error, Response Body and Constant messages After refering to actix-middleware-example developed by Eason Chai, I understood the basic workflow and skeleton of the example. I too defined a Service Error, one similar in actix-middleware-example to generalise the error and error response.
pub struct ServiceError { pub http_status: StatusCode, pub body: ResponseBody&amp;lt;String&amp;gt;, } impl ServiceError { pub fn new(http_status: StatusCode, message: String) -&amp;gt; ServiceError { ServiceError { http_status, body: ResponseBody { message, data: String::new(), }, } } pub fn response(&amp;amp;self) -&amp;gt; http::Result&amp;lt;Response&amp;lt;&amp;amp;ResponseBody&amp;lt;String&amp;gt;&amp;gt;&amp;gt; { Response::builder().</description>
            <content type="html"><![CDATA[<h2 id="tasks">Tasks:</h2>
<p>ðŸŸ© Axum real-world example.</p>
<h2 id="outcomes">Outcomes</h2>
<p><strong>axum-middleware-example</strong><br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/2a3f49aa9040e44a28c016d902abf4b5b3c281a3">utils, user model, user service</a></p>
<h2 id="workflow">Workflow</h2>
<h3 id="define-service-error-response-body-and-constant-messages">Define Service Error, Response Body and Constant messages</h3>
<p>After refering to actix-middleware-example developed by Eason Chai, I understood the basic workflow and skeleton of the example. I too defined a Service Error, one similar in actix-middleware-example to generalise the error and error response.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ServiceError</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> http_status: <span style="color:#a6e22e">StatusCode</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> body: <span style="color:#a6e22e">ResponseBody</span><span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">impl</span> ServiceError {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">new</span>(http_status: <span style="color:#a6e22e">StatusCode</span>, message: String) -&gt; <span style="color:#a6e22e">ServiceError</span> {
</span></span><span style="display:flex;"><span>         ServiceError {
</span></span><span style="display:flex;"><span>             http_status,
</span></span><span style="display:flex;"><span>             body: <span style="color:#a6e22e">ResponseBody</span> {
</span></span><span style="display:flex;"><span>                 message,
</span></span><span style="display:flex;"><span>                 data: String::new(),
</span></span><span style="display:flex;"><span>             },
</span></span><span style="display:flex;"><span>         }
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">response</span>(<span style="color:#f92672">&amp;</span>self) -&gt; <span style="color:#a6e22e">http</span>::Result<span style="color:#f92672">&lt;</span>Response<span style="color:#f92672">&lt;&amp;</span>ResponseBody<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;&gt;&gt;</span> {
</span></span><span style="display:flex;"><span>         Response::builder().status(self.http_status).body(<span style="color:#f92672">&amp;</span>self.body)
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>Here, ResponseBody is defined as below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[derive(Debug, Serialize, Deserialize)]</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ResponseBody</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> message: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> data: <span style="color:#a6e22e">T</span>,
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">impl</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> ResponseBody<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">new</span>(message: <span style="color:#66d9ef">&amp;</span><span style="color:#66d9ef">str</span>, data: <span style="color:#a6e22e">T</span>) -&gt; <span style="color:#a6e22e">ResponseBody</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>         ResponseBody {
</span></span><span style="display:flex;"><span>             message: <span style="color:#a6e22e">message</span>.to_string(),
</span></span><span style="display:flex;"><span>             data,
</span></span><span style="display:flex;"><span>         }
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><h3 id="setup-database">Setup Database</h3>
<p>/model/db.rs</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span>embed_migrations<span style="color:#f92672">!</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Connection</span> <span style="color:#f92672">=</span> PgConnection;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Pool</span> <span style="color:#f92672">=</span> r2d2::Pool<span style="color:#f92672">&lt;</span>ConnectionManager<span style="color:#f92672">&lt;</span>Connection<span style="color:#f92672">&gt;&gt;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">migrate_and_config_db</span>(url: <span style="color:#66d9ef">&amp;</span><span style="color:#66d9ef">str</span>, pool_size: <span style="color:#66d9ef">u32</span>) -&gt; <span style="color:#a6e22e">Pool</span> {
</span></span><span style="display:flex;"><span>     info<span style="color:#f92672">!</span>(<span style="color:#e6db74">&#34;Migrating and configurating database...&#34;</span>);
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> manager <span style="color:#f92672">=</span> ConnectionManager::<span style="color:#f92672">&lt;</span>Connection<span style="color:#f92672">&gt;</span>::new(url);
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> pool <span style="color:#f92672">=</span> r2d2::Pool::builder()
</span></span><span style="display:flex;"><span>         .connection_timeout(Duration::from_secs(<span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>         .max_size(pool_size)
</span></span><span style="display:flex;"><span>         .build(manager)
</span></span><span style="display:flex;"><span>         .expect(<span style="color:#e6db74">&#34;Failed to create pool.&#34;</span>);
</span></span><span style="display:flex;"><span>     embedded_migrations::run(<span style="color:#f92672">&amp;</span>pool.get().expect(<span style="color:#e6db74">&#34;Failed to migrate.&#34;</span>))
</span></span><span style="display:flex;"><span>         .expect(<span style="color:#e6db74">&#34;Failed to migrate.&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     pool
</span></span><span style="display:flex;"><span>} 
</span></span></code></pre></div><h3 id="model">model</h3>
<ol>
<li><strong>User Model</strong>
The user is defined as shown:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[derive(Debug, Serialize, Deserialize, Queryable)]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[diesel(table_name = users)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">User</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> id: <span style="color:#66d9ef">i32</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> username: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> email: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> password: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> role: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> login_session: String,
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>Here, I had to set NewUser, LoginForm and LoginInfo to implement the user methods like:
<code>add_user</code><br>
<code>update_user</code><br>
<code>get_user</code><br>
<code>get_all_users</code><br>
<code>signin</code><br>
<code>signup</code>\</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[derive(Insertable, Serialize, Deserialize, AsChangeset, Clone)]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[table_name = </span><span style="color:#e6db74">&#34;users&#34;</span><span style="color:#75715e">]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">NewUser</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> username: String,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> email: String,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> password: String,
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// #[serde(default = &#34;default_role&#34;)]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">pub</span> role: String,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> login_session: String
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[derive(Serialize, Deserialize)]</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">LoginForm</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> email: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> password: String,
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[derive(Insertable)]</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#[table_name = </span><span style="color:#e6db74">&#34;users&#34;</span><span style="color:#75715e">]</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">LoginInfo</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> username: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> role: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> login_session: String,
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>There are lot other methods define under <code>model/user.rs</code> which uses above structs to fetch or store data. <code>signin</code> is shown below for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">signin</span>(login: <span style="color:#a6e22e">LoginForm</span>, conn: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">Connection</span>) -&gt; Option<span style="color:#f92672">&lt;</span>LoginInfo<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> Ok(user_to_verify) <span style="color:#f92672">=</span> users
</span></span><span style="display:flex;"><span>             .filter(email.eq(<span style="color:#f92672">&amp;</span>login.email))
</span></span><span style="display:flex;"><span>             .get_result::<span style="color:#f92672">&lt;</span>User<span style="color:#f92672">&gt;</span>(conn)
</span></span><span style="display:flex;"><span>         {
</span></span><span style="display:flex;"><span>             <span style="color:#66d9ef">if</span> <span style="color:#f92672">!</span>user_to_verify.password.is_empty()
</span></span><span style="display:flex;"><span>                 <span style="color:#f92672">&amp;&amp;</span> compare_password(<span style="color:#f92672">&amp;</span>login.password, <span style="color:#f92672">&amp;</span>user_to_verify.password).unwrap()
</span></span><span style="display:flex;"><span>             {
</span></span><span style="display:flex;"><span>                 <span style="color:#66d9ef">let</span> login_session_str <span style="color:#f92672">=</span> User::generate_login_session();
</span></span><span style="display:flex;"><span>                 <span style="color:#66d9ef">if</span> User::update_login_session_to_db(
</span></span><span style="display:flex;"><span>                     <span style="color:#f92672">&amp;</span>user_to_verify.email,
</span></span><span style="display:flex;"><span>                     <span style="color:#f92672">&amp;</span>login_session_str,
</span></span><span style="display:flex;"><span>                     conn,
</span></span><span style="display:flex;"><span>                 ) {
</span></span><span style="display:flex;"><span>                     <span style="color:#66d9ef">return</span> Some(LoginInfo {
</span></span><span style="display:flex;"><span>                         username: <span style="color:#a6e22e">user_to_verify</span>.username,
</span></span><span style="display:flex;"><span>                         role: <span style="color:#a6e22e">user_to_verify</span>.role,
</span></span><span style="display:flex;"><span>                         login_session: <span style="color:#a6e22e">login_session_str</span>,
</span></span><span style="display:flex;"><span>                     });
</span></span><span style="display:flex;"><span>                 }
</span></span><span style="display:flex;"><span>             }
</span></span><span style="display:flex;"><span>         }
</span></span><span style="display:flex;"><span>         None
</span></span><span style="display:flex;"><span>     }
</span></span></code></pre></div><ol start="2">
<li><strong>UserToken and tokenutils</strong>
The usertoken is generated and validated using JWT authorisation. I used <code>jsonwebtoken::encode</code> to generate the user token after defining the Claims(UserToken). To encrypt the token a secret key is used, which can be generated by running <code>head -c16 /dev/urandom &gt; secret.key</code>. In <code>utils/token_utils.rs</code>, the token is decoded and validated using the default validation(same as used for encoding).</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[derive(Serialize, Deserialize)]</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">UserToken</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#75715e">// issued at
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>     <span style="color:#66d9ef">pub</span> iat: <span style="color:#66d9ef">i64</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#75715e">// expiration
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>     <span style="color:#66d9ef">pub</span> exp: <span style="color:#66d9ef">i64</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#75715e">// userID
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>     <span style="color:#66d9ef">pub</span> user_name: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> role: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> login_session: String
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">impl</span> UserToken {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">generate_token</span>(login: <span style="color:#a6e22e">LoginInfo</span>) -&gt; String{
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">let</span> now <span style="color:#f92672">=</span> Utc::now().timestamp_nanos() <span style="color:#f92672">/</span> <span style="color:#ae81ff">1_000_000_000</span>;
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">let</span> payload <span style="color:#f92672">=</span> UserToken {
</span></span><span style="display:flex;"><span>             iat: <span style="color:#a6e22e">now</span>,
</span></span><span style="display:flex;"><span>             exp: <span style="color:#a6e22e">now</span> <span style="color:#f92672">+</span> THREE_HOUR,
</span></span><span style="display:flex;"><span>             user_name: <span style="color:#a6e22e">login</span>.username,
</span></span><span style="display:flex;"><span>             role: <span style="color:#a6e22e">login</span>.role,
</span></span><span style="display:flex;"><span>             login_session:<span style="color:#a6e22e">login</span>.login_session
</span></span><span style="display:flex;"><span>         };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>         jsonwebtoken::encode(
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">&amp;</span>Header::default(),
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">&amp;</span>payload,
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">&amp;</span>EncodingKey::from_secret(<span style="color:#f92672">&amp;</span>KEY),
</span></span><span style="display:flex;"><span>         )
</span></span><span style="display:flex;"><span>         .unwrap()
</span></span><span style="display:flex;"><span>     }  
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>The code for decode_token and validate_token is on the same grounds, it can be found in the above commit.</p>
<h3 id="user-service">User Service</h3>
<p>The user service defines the <code>TokenBodyResponse</code> and other methods to be called in api calls.
Most of the methods are same as in actic-middleware-example with some small and obvious modifications. Since <code>actix</code> uses <code>actix_web::web</code> as extractor, I had to find the alternative of it in axum. I found the <code>axum::extract::Extension</code>, its implemented as shown:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">signin</span>(login: <span style="color:#a6e22e">LoginForm</span>, Extension(pool): <span style="color:#a6e22e">Extension</span><span style="color:#f92672">&lt;</span>Pool<span style="color:#f92672">&gt;</span>) -&gt; Result<span style="color:#f92672">&lt;</span>TokenBodyResponse, ServiceError<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// DO SOMETHING
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>The more information about Extension can be found <a href="https://docs.rs/axum/0.5.13/axum/extract/index.html#reexport.Extension">here</a>.</p>
<p>TokenBodyResponse:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[derive(Serialize, Deserialize)]</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">TokenBodyResponse</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> token: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> token_type: String,
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>The User Service implements the following methods:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">async</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">add_user</span>() {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">get_all_user</span>(Extension(pool): <span style="color:#a6e22e">Extension</span><span style="color:#f92672">&lt;</span>Pool<span style="color:#f92672">&gt;</span>) -&gt; Result<span style="color:#f92672">&lt;</span>Vec<span style="color:#f92672">&lt;</span>User<span style="color:#f92672">&gt;</span>, ServiceError<span style="color:#f92672">&gt;</span>{
</span></span><span style="display:flex;"><span>     <span style="color:#75715e">//..//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">get_user</span>(user_id: <span style="color:#66d9ef">i32</span>, Extension(pool): <span style="color:#a6e22e">Extension</span><span style="color:#f92672">&lt;</span>Pool<span style="color:#f92672">&gt;</span>) -&gt; Result<span style="color:#f92672">&lt;</span>User, ServiceError<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#75715e">//..//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">signin</span>(login: <span style="color:#a6e22e">LoginForm</span>, Extension(pool): <span style="color:#a6e22e">Extension</span><span style="color:#f92672">&lt;</span>Pool<span style="color:#f92672">&gt;</span>) -&gt; Result<span style="color:#f92672">&lt;</span>TokenBodyResponse, ServiceError<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#75715e">//...//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">update_user</span>() {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">delete_user</span>() {}
</span></span></code></pre></div><h3 id="utils">Utils</h3>
<ol>
<li><strong>utils/bcrypt.rs</strong>
It has methods to hash password and compare passwords. To hash password, it uses the <code>HASH_ROUNDS</code> from <code>.env</code> and uses <code>bcrypt::hash</code>. It hashes password into a String. To compare password, <code>bcrypt::verify</code> is used and returns a boolean. Both the method has Service Error mapped with them.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">hash_password</span>(plain: <span style="color:#66d9ef">&amp;</span><span style="color:#66d9ef">str</span>) -&gt; Result<span style="color:#f92672">&lt;</span>String, ServiceError<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> hashing_cost: <span style="color:#66d9ef">u32</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">match</span> env::var(<span style="color:#e6db74">&#34;HASH_ROUNDS&#34;</span>) {
</span></span><span style="display:flex;"><span>         Ok(cost) <span style="color:#f92672">=&gt;</span> cost.parse().unwrap_or(DEFAULT_COST),
</span></span><span style="display:flex;"><span>         _ <span style="color:#f92672">=&gt;</span> DEFAULT_COST,
</span></span><span style="display:flex;"><span>     };
</span></span><span style="display:flex;"><span>     hash(plain, hashing_cost).map_err(<span style="color:#f92672">|</span>_<span style="color:#f92672">|</span> {
</span></span><span style="display:flex;"><span>         ServiceError::new(
</span></span><span style="display:flex;"><span>             StatusCode::INTERNAL_SERVER_ERROR,
</span></span><span style="display:flex;"><span>             constants::MESSAGE_PROCESS_TOKEN_ERROR.to_string(),
</span></span><span style="display:flex;"><span>         )
</span></span><span style="display:flex;"><span>     })
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">compare_password</span>(plain: <span style="color:#66d9ef">&amp;</span><span style="color:#66d9ef">str</span>, hash: <span style="color:#66d9ef">&amp;</span><span style="color:#66d9ef">str</span>) -&gt; Result<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">bool</span>, ServiceError<span style="color:#f92672">&gt;</span>{
</span></span><span style="display:flex;"><span>     verify(plain, hash).map_err(<span style="color:#f92672">|</span>_<span style="color:#f92672">|</span> {
</span></span><span style="display:flex;"><span>         ServiceError::new(
</span></span><span style="display:flex;"><span>             StatusCode::INTERNAL_SERVER_ERROR,
</span></span><span style="display:flex;"><span>             constants::MESSAGE_PROCESS_TOKEN_ERROR.to_string(),
</span></span><span style="display:flex;"><span>         )
</span></span><span style="display:flex;"><span>     })
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><ol start="2">
<li><strong>token_utils</strong>
Defined above</li>
</ol>
<h2 id="next-week-target">Next Week target</h2>
<p>In the later part of the week, I realised that I have used wrong response method for the <code>ServiceError::response()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">response</span>(<span style="color:#f92672">&amp;</span>self) -&gt; <span style="color:#a6e22e">http</span>::Result<span style="color:#f92672">&lt;</span>Response<span style="color:#f92672">&lt;&amp;</span>ResponseBody<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;&gt;&gt;</span> {
</span></span><span style="display:flex;"><span>         Response::builder().status(self.http_status).body(<span style="color:#f92672">&amp;</span>self.body)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The above is supposed to send axum::response::Response, but here http::Response was used and hence has to be corrected. Also, since the <code>ResponseBody</code> is custom method and don&rsquo;t have <code>IntoResponse</code> implemented for it, hence I need to implement <code>IntoResponse</code> for the <code>ResponseBody</code>.
Also, in the coming week I plan to implement <code>middleware</code>, set <code>routes</code>, add <code>register/signup</code> methods and finally put all in <code>main.rs</code> and complete the axum-middleware-example.</p>
<p>Also, after completing axum-middleware-example I would make <code>clippy</code> happy in <code>casbin-rs/examples</code> and <code>casbin-rs/axum-casbin-auth</code> and then in the next to next week will start with <code>casbin-openraft</code>.</p>
]]></content>
        </item>
        
        <item>
            <title>GSoC: Week 5</title>
            <link>https://siddheshkanawade.github.io/posts/week5/</link>
            <pubDate>Fri, 15 Jul 2022 22:43:56 +0530</pubDate>
            
            <guid>https://siddheshkanawade.github.io/posts/week5/</guid>
            <description>Tasks: âœ… casbin-example respository multiple depencies version conflict resolve ðŸŸ© Real-life example for Axum middleware
Outcomes casbin-example: tokio and async-std conflict resolved fix: Update tokio
axum-middleware-example: filestructure and initial db implementation
Workflow casbin-example Tokio reimport error(after resolving error in actix-casbin and actix-casbin-auth):
error[E0252]: the name `IoError` is defined multiple times --&amp;gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:20:10 | 13 | io::{BufReader, Error as IoError, ErrorKind}, | ---------------- previous import of the type `IoError` here ... 20 | io::{Error as IoError, ErrorKind}, | ^^^^^^^^^^^^^^^^-- | | | `IoError` reimported here | help: remove unnecessary import | = note: `IoError` must be defined only once in the type namespace of this module error[E0252]: the name `ErrorKind` is defined multiple times --&amp;gt; /home/siddhesh/.</description>
            <content type="html"><![CDATA[<h2 id="tasks">Tasks:</h2>
<p>âœ… casbin-example respository multiple depencies version conflict resolve <br>
ðŸŸ© Real-life example for Axum middleware</p>
<h2 id="outcomes">Outcomes</h2>
<ol>
<li>
<p><strong>casbin-example:</strong> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/565baf177a3961ff49f5b8135ad8d211418e7ac0">tokio and async-std conflict resolved</a> <br>
<a href="https://github.com/casbin-rs/actix-casbin/pull/25">fix: Update tokio</a></p>
</li>
<li>
<p><strong>axum-middleware-example:</strong> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/bcdc9ddd0f32af2b7c36e0267ffb45749e585239">filestructure and initial db implementation</a></p>
</li>
</ol>
<h2 id="workflow">Workflow</h2>
<h3 id="casbin-example">casbin-example</h3>
<p>Tokio reimport error(after resolving error in actix-casbin and actix-casbin-auth):</p>
<pre tabindex="0"><code class="language-error" data-lang="error">error[E0252]: the name `IoError` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:20:10
   |
13 |     io::{BufReader, Error as IoError, ErrorKind},
   |                     ---------------- previous import of the type `IoError` here
...
20 |     io::{Error as IoError, ErrorKind},
   |          ^^^^^^^^^^^^^^^^--
   |          |
   |          `IoError` reimported here
   |          help: remove unnecessary import
   |
   = note: `IoError` must be defined only once in the type namespace of this module

error[E0252]: the name `ErrorKind` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:20:28
   |
13 |     io::{BufReader, Error as IoError, ErrorKind},
   |                                       --------- previous import of the type `ErrorKind` here
...
20 |     io::{Error as IoError, ErrorKind},
   |                            ^^^^^^^^^ `ErrorKind` reimported here
   |
   = note: `ErrorKind` must be defined only once in the type namespace of this module

error[E0252]: the name `Path` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:21:5
   |
14 |     path::Path,
   |     ---------- previous import of the type `Path` here
...
21 |     path::Path,
   |     ^^^^^^^^^^ `Path` reimported here
   |
   = note: `Path` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
21 |     path::Path as OtherPath,
   |     ~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `File` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:25:5
   |
11 |     fs::File,
   |     -------- previous import of the type `File` here
...
25 |     fs::File,
   |     ^^^^^^^^ `File` reimported here
   |
   = note: `File` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
25 |     fs::File as OtherFile,
   |     ~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `BufReader` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:26:42
   |
13 |     io::{BufReader, Error as IoError, ErrorKind},
   |          --------- previous import of the type `BufReader` here
...
26 |     io::{AsyncBufReadExt, AsyncWriteExt, BufReader},
   |                                          ^^^^^^^^^ `BufReader` reimported here
   |
   = note: `BufReader` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
26 |     io::{AsyncBufReadExt, AsyncWriteExt, BufReader as OtherBufReader},
   |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Cursor` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:13:11
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |                     ------ previous import of the type `Cursor` here
...
13 | use std::{io::Cursor, path::Path};
   |           ^^^^^^^^^^ `Cursor` reimported here
   |
   = note: `Cursor` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
13 | use std::{io::Cursor as OtherCursor, path::Path};
   |           ~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Path` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:13:23
   |
10 | use async_std::{fs::File, path::Path};
   |                           ---------- previous import of the type `Path` here
...
13 | use std::{io::Cursor, path::Path};
   |                       ^^^^^^^^^^ `Path` reimported here
   |
   = note: `Path` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
13 | use std::{io::Cursor, path::Path as OtherPath};
   |                       ~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `BufReader` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:16:36
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |          --------- previous import of the type `BufReader` here
...
16 |     AsyncBufReadExt, AsyncReadExt, BufReader, Error as IoError, ErrorKind,
   |                                    ^^^^^^^^^ `BufReader` reimported here
   |
   = note: `BufReader` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
16 |     AsyncBufReadExt, AsyncReadExt, BufReader as OtherBufReader, Error as IoError, ErrorKind,
   |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `IoError` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:16:47
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |                             ---------------- previous import of the type `IoError` here
...
16 |     AsyncBufReadExt, AsyncReadExt, BufReader, Error as IoError, ErrorKind,
   |                                               ^^^^^^^^^^^^^^^^--
   |                                               |
   |                                               `IoError` reimported here
   |                                               help: remove unnecessary import
   |
   = note: `IoError` must be defined only once in the type namespace of this module

error[E0252]: the name `ErrorKind` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:16:65
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |                                               --------- previous import of the type `ErrorKind` here
...
16 |     AsyncBufReadExt, AsyncReadExt, BufReader, Error as IoError, ErrorKind,
   |                                                                 ^^^^^^^^^-
   |                                                                 |
   |                                                                 `ErrorKind` reimported here
   |                                                                 help: remove unnecessary import
   |
   = note: `ErrorKind` must be defined only once in the type namespace of this module

error[E0252]: the name `File` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:20:5
   |
10 | use async_std::{fs::File, path::Path};
   |                 -------- previous import of the type `File` here
...
20 | use tokio::fs::File;
   |     ^^^^^^^^^^^^^^^ `File` reimported here
   |
   = note: `File` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
20 | use tokio::fs::File as OtherFile;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Path` is defined multiple times
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/model/default_model.rs:20:5
   |
17 | use async_std::path::Path;
   |     --------------------- previous import of the type `Path` here
...
20 | use std::path::Path;
   |     ^^^^^^^^^^^^^^^ `Path` reimported here
   |
   = note: `Path` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
20 | use std::path::Path as OtherPath;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `next_line` found for struct `async_std::io::Lines` in the current scope
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:66:38
   |
66 |         while let Some(line) = lines.next_line().await? {
   |                                      ^^^^^^^^^ method not found in `async_std::io::Lines&lt;async_std::io::BufReader&lt;async_std::fs::File&gt;&gt;`

error[E0599]: no method named `next_line` found for struct `async_std::io::Lines` in the current scope
  --&gt; /home/siddhesh/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:91:38
   |
91 |         while let Some(line) = lines.next_line().await? {
   |                                      ^^^^^^^^^ method not found in `async_std::io::Lines&lt;async_std::io::BufReader&lt;async_std::fs::File&gt;&gt;`

Some errors have detailed explanations: E0252, E0599.
For more information about an error, try `rustc --explain E0252`.
error: could not compile `casbin` due to 14 previous errors
</code></pre><p>After ensuring the build compiles in the individual directories in the casbin-rs/examples, the next task in the line was to ensure that the main workspace compile successfully. From the error console it was not clear what was exactly causing the error. I figured out that the error was due to the simultanous usage of <code>tokio</code> and <code>async-std</code> feature of casbin with the help of tokio community. Initially I tried to enable async-std feature and disable tokio since there was reimport of tokio. But since actix uses tokio, there was still import of the tokio. Hence I had to enable <code>tokio-runtime</code> and disable <code>async-std-runtimes</code>.</p>
<p>Following error was encountered after resolving the above conflict:</p>
<p><img src="/img/week3n4/actixdep.png" alt="Image alt"></p>
<p><code>actix-casbin</code> had deprecated version of tokio which was causing different versions of tokio and hence had to update it. Opened a PR to do so.</p>
<h3 id="axum-middleware-example">axum-middleware-example</h3>
<p>The next task in list was to develop a real-life example using <code>axum-casbin-auth</code>. I had <code>actix-middleware-example</code> developed by Eason Chai for reference. I did some research and found following example good enough to be reproduced in Rust.</p>
<p><a href="https://medium.com/wesionary-team/authorization-in-golang-projects-using-casbin-f8fad744dae5">Authorization in Golang Projects using Casbin</a></p>
<p>I will aim to make a example capable of doing simple CRUD operations on backend.</p>
<ol>
<li>Backend: <code>Postgres</code></li>
<li><code>diesel</code> to access backend.</li>
</ol>
<p><strong>What will app do:</strong>  I aim to have a basic application based on RBAC model. I will group users into two groups: <code>doctor</code> and <code>patient</code>. As obvious it sounds, doctor will have priveledged permissions than patient.</p>
<p>The <code>rbac.conf</code> looks like:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">[request_definition]
 r = sub, obj, act

 [policy_definition]
 p = sub, obj, act

 [role_definition]
 g = _, _

 [policy_effect]
 e = some(where (p.eft == allow))

 [matchers]
 m = g(r.sub, p.sub) &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act 
</code></pre><p>The application will match the permissions from frontend to backend and will respond with appropriate response. The identification would be done via email and password.</p>
<p>The user model looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[derive(Debug, Serialize, Deserialize, Queryable)]</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#[diesel(table_name = users)]</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">User</span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> id: <span style="color:#66d9ef">i32</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> username: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> email: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> password: String,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">pub</span> role: String,
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>In this week I aimed at creating a Database, a basic filestructure, and add code templates. Following are few examples:</p>
<p>bcrypt.rs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">use</span> <span style="color:#66d9ef">crate</span>::constants;
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">use</span> bcrypt::{hash, verify, DEFAULT_COST};
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">use</span> std::env;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">hash_password</span>() {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">compare_password</span>() {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">generate_token</span>() {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">validate_token</span>() {}
</span></span></code></pre></div><p>auth.rs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">impl</span><span style="color:#f92672">&lt;</span>S, ReqBody, ResBody<span style="color:#f92672">&gt;</span> Service<span style="color:#f92672">&lt;</span>Request<span style="color:#f92672">&lt;</span>ReqBody<span style="color:#f92672">&gt;&gt;</span> <span style="color:#66d9ef">for</span> AuthMiddleware<span style="color:#f92672">&lt;</span>S<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>     S: <span style="color:#a6e22e">Service</span><span style="color:#f92672">&lt;</span>Request<span style="color:#f92672">&lt;</span>ReqBody<span style="color:#f92672">&gt;</span>, Response <span style="color:#f92672">=</span> Response<span style="color:#f92672">&lt;</span>ResBody<span style="color:#f92672">&gt;</span>, Error <span style="color:#f92672">=</span> Infallible<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">+</span> Clone
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">+</span> Send
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">+</span> <span style="color:#f92672">&#39;</span>static,
</span></span><span style="display:flex;"><span>     S::Future: Send <span style="color:#f92672">+</span> <span style="color:#f92672">&#39;</span>static,
</span></span><span style="display:flex;"><span>     ReqBody: Send <span style="color:#f92672">+</span> <span style="color:#f92672">&#39;</span>static,
</span></span><span style="display:flex;"><span>     Infallible: From<span style="color:#f92672">&lt;&lt;</span>S <span style="color:#66d9ef">as</span> Service<span style="color:#f92672">&lt;</span>Request<span style="color:#f92672">&lt;</span>ReqBody<span style="color:#f92672">&gt;&gt;&gt;</span>::Error<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>     ResBody: <span style="color:#a6e22e">HttpBody</span><span style="color:#f92672">&lt;</span>Data <span style="color:#f92672">=</span> Bytes<span style="color:#f92672">&gt;</span> <span style="color:#f92672">+</span> Send <span style="color:#f92672">+</span> <span style="color:#f92672">&#39;</span>static,
</span></span><span style="display:flex;"><span>     ResBody::Error: Into<span style="color:#f92672">&lt;</span>BoxError<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span> {
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Response</span> <span style="color:#f92672">=</span> S::Response;
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Error</span> <span style="color:#f92672">=</span> S::Error;
</span></span><span style="display:flex;"><span>     <span style="color:#75715e">// `BoxFuture` is a type alias for `Pin&lt;Box&lt;dyn Future + Send + &#39;a&gt;&gt;`
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>     <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Future</span> <span style="color:#f92672">=</span> BoxFuture<span style="color:#f92672">&lt;&#39;</span>static, Result<span style="color:#f92672">&lt;</span>Self::Response, Self::Error<span style="color:#f92672">&gt;&gt;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">poll_ready</span>(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self, cx: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">mut</span> Context<span style="color:#f92672">&lt;&#39;</span>_<span style="color:#f92672">&gt;</span>) -&gt; <span style="color:#a6e22e">Poll</span><span style="color:#f92672">&lt;</span>Result<span style="color:#f92672">&lt;</span>(), Self::Error<span style="color:#f92672">&gt;&gt;</span> {
</span></span><span style="display:flex;"><span>         self.inner.poll_ready(cx)
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">call</span>(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self, <span style="color:#66d9ef">mut</span> req: <span style="color:#a6e22e">Request</span><span style="color:#f92672">&lt;</span>ReqBody<span style="color:#f92672">&gt;</span>) -&gt; <span style="color:#a6e22e">Self</span>::Future {
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">let</span> not_ready_inner <span style="color:#f92672">=</span> self.inner.clone();
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> inner <span style="color:#f92672">=</span> std::mem::replace(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self.inner, not_ready_inner);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>         <span style="color:#75715e">// IMPLEMENT LOGIC HERE
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>         Box::pin(<span style="color:#66d9ef">async</span> <span style="color:#66d9ef">move</span> {
</span></span><span style="display:flex;"><span>             inner.call(req).<span style="color:#66d9ef">await</span>
</span></span><span style="display:flex;"><span>         })
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>After setting up the user model run the <code>diesel migration generate users</code> command to generate the <code>migrations</code> file for our database. Setup the database structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> users
</span></span><span style="display:flex;"><span> (
</span></span><span style="display:flex;"><span>     id         SERIAL <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span>,
</span></span><span style="display:flex;"><span>     username   VARCHAR(<span style="color:#ae81ff">32</span>)  <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>     email      VARCHAR(<span style="color:#ae81ff">100</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>     password   VARCHAR(<span style="color:#ae81ff">200</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">role</span>       VARCHAR(<span style="color:#ae81ff">32</span>)  <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>
</span></span><span style="display:flex;"><span> );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> users
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">VALUES</span> (<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#39;John&#39;</span>, <span style="color:#e6db74">&#39;john@john.com&#39;</span>, <span style="color:#e6db74">&#39;imjohn&#39;</span>, <span style="color:#e6db74">&#39;doctor&#39;</span>);
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> users
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">VALUES</span> (<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;Sam&#39;</span>, <span style="color:#e6db74">&#39;sam@sam.com&#39;</span>, <span style="color:#e6db74">&#39;imsam&#39;</span>, <span style="color:#e6db74">&#39;patient&#39;</span>);
</span></span></code></pre></div><p><code>diesel migration run</code> to generate the schema.rs file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span>table<span style="color:#f92672">!</span> {
</span></span><span style="display:flex;"><span>     users (id) {
</span></span><span style="display:flex;"><span>         id -&gt; <span style="color:#a6e22e">Int4</span>,
</span></span><span style="display:flex;"><span>         username -&gt; <span style="color:#a6e22e">Varchar</span>,
</span></span><span style="display:flex;"><span>         email -&gt; <span style="color:#a6e22e">Varchar</span>,
</span></span><span style="display:flex;"><span>         password -&gt; <span style="color:#a6e22e">Varchar</span>,
</span></span><span style="display:flex;"><span>         role -&gt; <span style="color:#a6e22e">Varchar</span>,
</span></span><span style="display:flex;"><span>     }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>Next we will connect database with out project, for this add following <code>.env</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-env" data-lang="env"><span style="display:flex;"><span>APP_HOST<span style="color:#f92672">=</span>127.0.0.1
</span></span><span style="display:flex;"><span>APP_PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>DATABASE_URL<span style="color:#f92672">=</span>postgres://postgres:postgresAdmin@127.0.0.1:5432/casbintest
</span></span><span style="display:flex;"><span>POOL_SIZE<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>HASH_ROUNDS<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span>
</span></span></code></pre></div><p>Connect database with project:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">establish_connection</span>() -&gt; <span style="color:#a6e22e">PgConnection</span> {
</span></span><span style="display:flex;"><span>     dotenv().ok();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">let</span> database_url <span style="color:#f92672">=</span> env::var(<span style="color:#e6db74">&#34;DATABASE_URL&#34;</span>).expect(<span style="color:#e6db74">&#34;DATABASE_URL must be set&#34;</span>);
</span></span><span style="display:flex;"><span>     PgConnection::establish(<span style="color:#f92672">&amp;</span>database_url)
</span></span><span style="display:flex;"><span>         .expect(<span style="color:#f92672">&amp;</span>format!(<span style="color:#e6db74">&#34;Error connecting to {}&#34;</span>, database_url))
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><p>Now load the data from the project to database. Will do this in main.rs. After successful setup of the database, we get the following output:</p>
<p><img src="/img/week5/database.png" alt="Image alt"></p>
]]></content>
        </item>
        
        <item>
            <title>GSoC: Week 3 and 4</title>
            <link>https://siddheshkanawade.github.io/posts/week3n4/</link>
            <pubDate>Sun, 10 Jul 2022 15:35:40 +0530</pubDate>
            
            <guid>https://siddheshkanawade.github.io/posts/week3n4/</guid>
            <description>Tasks: âœ… casbin-rs/example respository maintainence âœ… Add CI to axum middleware âœ… Add tests and examples to axum-casbin-auth
Outcomes casbin-rs/example: actix-fileadapter-rbac, actix-pgsql-simple, ntex-fileadapter-acl error resolved ntex-fileadapter-acl build success actix-middleware-example
Add CI in axum middleware: added workflow
Add tests and examples to axum-casbin-auth: added tests/examples for axum-casbin-auth
Workflow Casbin-rs/examples The repository had the following set of errors when ran for the first time:
error[E0252]: the name `IoError` is defined multiple times --&amp;gt; /Users/macbookair/.</description>
            <content type="html"><![CDATA[<h2 id="tasks">Tasks:</h2>
<p>âœ… casbin-rs/example respository maintainence <br>
âœ… Add CI to axum middleware <br>
âœ… Add tests and examples to axum-casbin-auth</p>
<h2 id="outcomes">Outcomes</h2>
<ol>
<li>
<p><strong>casbin-rs/example:</strong> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/bd7097eae46694238750bf4abddfa9de5caf8134">actix-fileadapter-rbac, actix-pgsql-simple, ntex-fileadapter-acl error resolved</a> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/10069e0ddcde004c0a0916d4cf4944b8e8552fb6">ntex-fileadapter-acl build success</a> <br>
<a href="https://github.com/casbin-rs/examples/pull/72/commits/9dc325b5867cb9bfda1948abdd14bccc67f926f7">actix-middleware-example</a></p>
</li>
<li>
<p><strong>Add CI in axum middleware:</strong> <br>
<a href="https://github.com/casbin-rs/axum-casbin-auth/pull/1/commits/3d9b95ab9f6874373bebdff563553a6b4b8e36c5">added workflow</a></p>
</li>
<li>
<p><strong>Add tests and examples to axum-casbin-auth</strong>: <br>
<a href="https://github.com/casbin-rs/axum-casbin-auth/pull/1/commits/4205eace8d503288503cead976683daff7c4c3cb">added tests/examples for axum-casbin-auth</a></p>
</li>
</ol>
<h2 id="workflow">Workflow</h2>
<h3 id="casbin-rsexamples">Casbin-rs/examples</h3>
<p>The repository had the following set of errors when ran for the first time:</p>
<pre tabindex="0"><code class="language-error" data-lang="error">error[E0252]: the name `IoError` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:20:10
   |
13 |     io::{BufReader, Error as IoError, ErrorKind},
   |                     ---------------- previous import of the type `IoError` here
...
20 |     io::{Error as IoError, ErrorKind},
   |          ^^^^^^^^^^^^^^^^--
   |          |
   |          `IoError` reimported here
   |          help: remove unnecessary import
   |
   = note: `IoError` must be defined only once in the type namespace of this module

error[E0252]: the name `ErrorKind` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:20:28
   |
13 |     io::{BufReader, Error as IoError, ErrorKind},
   |                                       --------- previous import of the type `ErrorKind` here
...
20 |     io::{Error as IoError, ErrorKind},
   |                            ^^^^^^^^^ `ErrorKind` reimported here
   |
   = note: `ErrorKind` must be defined only once in the type namespace of this module

error[E0252]: the name `Path` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:21:5
   |
14 |     path::Path,
   |     ---------- previous import of the type `Path` here
...
21 |     path::Path,
   |     ^^^^^^^^^^ `Path` reimported here
   |
   = note: `Path` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
21 |     path::Path as OtherPath,
   |     ~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `File` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:25:5
   |
11 |     fs::File,
   |     -------- previous import of the type `File` here
...
25 |     fs::File,
   |     ^^^^^^^^ `File` reimported here
   |
   = note: `File` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
25 |     fs::File as OtherFile,
   |     ~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `BufReader` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:26:42
   |
13 |     io::{BufReader, Error as IoError, ErrorKind},
   |          --------- previous import of the type `BufReader` here
...
26 |     io::{AsyncBufReadExt, AsyncWriteExt, BufReader},
   |                                          ^^^^^^^^^ `BufReader` reimported here
   |
   = note: `BufReader` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
26 |     io::{AsyncBufReadExt, AsyncWriteExt, BufReader as OtherBufReader},
   |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Cursor` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:13:11
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |                     ------ previous import of the type `Cursor` here
...
13 | use std::{io::Cursor, path::Path};
   |           ^^^^^^^^^^ `Cursor` reimported here
   |
   = note: `Cursor` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
13 | use std::{io::Cursor as OtherCursor, path::Path};
   |           ~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Path` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:13:23
   |
10 | use async_std::{fs::File, path::Path};
   |                           ---------- previous import of the type `Path` here
...
13 | use std::{io::Cursor, path::Path};
   |                       ^^^^^^^^^^ `Path` reimported here
   |
   = note: `Path` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
13 | use std::{io::Cursor, path::Path as OtherPath};
   |                       ~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `BufReader` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:16:36
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |          --------- previous import of the type `BufReader` here
...
16 |     AsyncBufReadExt, AsyncReadExt, BufReader, Error as IoError, ErrorKind,
   |                                    ^^^^^^^^^ `BufReader` reimported here
   |
   = note: `BufReader` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
16 |     AsyncBufReadExt, AsyncReadExt, BufReader as OtherBufReader, Error as IoError, ErrorKind,
   |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `IoError` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:16:47
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |                             ---------------- previous import of the type `IoError` here
...
16 |     AsyncBufReadExt, AsyncReadExt, BufReader, Error as IoError, ErrorKind,
   |                                               ^^^^^^^^^^^^^^^^--
   |                                               |
   |                                               `IoError` reimported here
   |                                               help: remove unnecessary import
   |
   = note: `IoError` must be defined only once in the type namespace of this module

error[E0252]: the name `ErrorKind` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:16:65
   |
6  |     io::{BufReader, Cursor, Error as IoError, ErrorKind},
   |                                               --------- previous import of the type `ErrorKind` here
...
16 |     AsyncBufReadExt, AsyncReadExt, BufReader, Error as IoError, ErrorKind,
   |                                                                 ^^^^^^^^^-
   |                                                                 |
   |                                                                 `ErrorKind` reimported here
   |                                                                 help: remove unnecessary import
   |
   = note: `ErrorKind` must be defined only once in the type namespace of this module

error[E0252]: the name `File` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/config.rs:20:5
   |
10 | use async_std::{fs::File, path::Path};
   |                 -------- previous import of the type `File` here
...
20 | use tokio::fs::File;
   |     ^^^^^^^^^^^^^^^ `File` reimported here
   |
   = note: `File` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
20 | use tokio::fs::File as OtherFile;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Path` is defined multiple times
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/model/default_model.rs:20:5
   |
17 | use async_std::path::Path;
   |     --------------------- previous import of the type `Path` here
...
20 | use std::path::Path;
   |     ^^^^^^^^^^^^^^^ `Path` reimported here
   |
   = note: `Path` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
20 | use std::path::Path as OtherPath;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Compiling actix-codec v0.3.0
error[E0599]: no method named `next_line` found for struct `async_std::io::Lines` in the current scope
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:66:38
   |
66 |         while let Some(line) = lines.next_line().await? {
   |                                      ^^^^^^^^^ method not found in `async_std::io::Lines&lt;async_std::io::BufReader&lt;async_std::fs::File&gt;&gt;`

error[E0599]: no method named `next_line` found for struct `async_std::io::Lines` in the current scope
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/casbin-2.0.9/src/adapter/file_adapter.rs:91:38
   |
91 |         while let Some(line) = lines.next_line().await? {
   |                                      ^^^^^^^^^ method not found in `async_std::io::Lines&lt;async_std::io::BufReader&lt;async_std::fs::File&gt;&gt;`

   Compiling h2 v0.2.7
Some errors have detailed explanations: E0252, E0599.
For more information about an error, try `rustc --explain E0252`.
error: could not compile `casbin` due to 14 previous errors
</code></pre><p>After analyzing it was found that both <code>tokio</code> and <code>async-std</code> features of casbin were enabled which should be the case. I decided compile the individual examples and then compile the rest project.</p>
<h4 id="actix-fileadapter-rbac-and-actix-pgsql-simple">actix-fileadapter-rbac and actix-pgsql-simple</h4>
<p>There was no error thrown after updating the dependencies and compiled successfully</p>
<h4 id="ntex-fileadapter-acl">ntex-fileadapter-acl</h4>
<p>All the depedencies were to the mark, but it threw following error after running <code>cargo build</code></p>
<pre tabindex="0"><code class="language-error" data-lang="error">error[E0432]: unresolved import `crate::rt::Signal`
 --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/builder.rs:8:24
  |
8 | use crate::rt::{spawn, Signal, System};
  |                        ^^^^^^ no `Signal` in `rt`

error[E0432]: unresolved import `crate::rt::tcp_connect`
 --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/test.rs:6:17
  |
6 | use crate::rt::{tcp_connect, System};
  |                 ^^^^^^^^^^^ no `tcp_connect` in `rt`

error[E0425]: cannot find function `signal` in module `crate::rt`
   --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/builder.rs:480:38
    |
480 |         if let Some(rx) = crate::rt::signal() {
    |                                      ^^^^^^ not found in `crate::rt`

error[E0425]: cannot find function `from_tcp_stream` in module `rt`
   --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/socket.rs:148:40
    |
148 |             Stream::Tcp(stream) =&gt; rt::from_tcp_stream(stream),
    |                                        ^^^^^^^^^^^^^^^ not found in `rt`
    |
help: consider importing one of these items
    |
1   | use crate::connect::net::from_tcp_stream;
    |
1   | use ntex_connect::net::from_tcp_stream;
    |
help: if you import `from_tcp_stream`, refer to it directly
    |
148 -             Stream::Tcp(stream) =&gt; rt::from_tcp_stream(stream),
148 +             Stream::Tcp(stream) =&gt; from_tcp_stream(stream),
    | 

error[E0425]: cannot find function `from_unix_stream` in module `rt`
   --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/socket.rs:150:40
    |
150 |             Stream::Uds(stream) =&gt; rt::from_unix_stream(stream),
    |                                        ^^^^^^^^^^^^^^^^ not found in `rt`
    |
help: consider importing one of these items
    |
1   | use crate::connect::net::from_unix_stream;
    |
1   | use ntex_connect::net::from_unix_stream;
    |
help: if you import `from_unix_stream`, refer to it directly
    |
150 -             Stream::Uds(stream) =&gt; rt::from_unix_stream(stream),
150 +             Stream::Uds(stream) =&gt; from_unix_stream(stream),
    | 

error[E0412]: cannot find type `Signal` in module `crate::rt`
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/mod.rs:67:23
   |
67 |     Signal(crate::rt::Signal),
   |                       ^^^^^^ not found in `crate::rt`
   |
help: there is an enum variant `crate::server::ServerCommand::Signal`; try using the variant&#39;s enum
   |
67 |     Signal(crate::server::ServerCommand),
   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0412]: cannot find type `Signal` in module `crate::rt`
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/ntex-0.5.24/src/server/mod.rs:91:38
   |
91 |     fn signal(&amp;self, sig: crate::rt::Signal) {
   |                                      ^^^^^^ not found in `crate::rt`
   |
help: there is an enum variant `crate::server::ServerCommand::Signal`; try using the variant&#39;s enum
   |
91 |     fn signal(&amp;self, sig: crate::server::ServerCommand) {
   |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0412, E0425, E0432.
For more information about an error, try `rustc --explain E0412`.
error: could not compile `ntex` due to 7 previous errors
</code></pre><p>After discussing with the ntex community it was found that incorrect features of <code>ntex</code> used. Entire conversation can be found <a href="https://github.com/ntex-rs/ntex/discussions/127">here</a> <code>ntex = &quot;0.5&quot;</code> was changed to <code>ntex = { version = &quot;0.5&quot;, features = [&quot;tokio&quot;] }</code>. Even after updating this, following error was thrown:</p>
<pre tabindex="0"><code class="language-error" data-lang="error">error[E0599]: no method named `app_data` found for struct `App` in the current scope
  --&gt; ntex-fileadapter-acl/src/main.rs:46:14
   |
46 |             .app_data(e.clone()) // &lt;- create app with shared state
   |              ^^^^^^^^ method not found in `App&lt;ntex::service::Identity, web::app::Filter&lt;DefaultError&gt;&gt;`
</code></pre><p>This is due to the version upgrade of ntex, resolve can be found <a href="https://github.com/casbin-rs/examples/pull/72/files#diff-63e997272b56167db79065780451a949630a1e40df2a762b297774fd2112769dL8">here</a></p>
<h4 id="actix-middleware-example">actix-middleware-example</h4>
<p>On updating the actix-web and actix-rt versions, we get the following error:</p>
<pre tabindex="0"><code class="language-error" data-lang="error">error[E0277]: the trait bound `CasbinActor&lt;CachedEnforcer&gt;: Actor` is not satisfied
  --&gt; actix-middleware-example/src/api/user.rs:34:22
   |
34 |     actor: web::Data&lt;Addr&lt;CasbinActor&lt;CachedEnforcer&gt;&gt;&gt;,
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Actor` is not implemented for `CasbinActor&lt;CachedEnforcer&gt;`
   |
   = help: the following other types implement trait `Actor`:
             Mocker&lt;T&gt;
             SyncArbiter&lt;A&gt;
note: required by a bound in `Addr`
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-0.11.1/src/address/mod.rs:77:20
   |
77 | pub struct Addr&lt;A: Actor&gt; {
   |                    ^^^^^ required by this bound in `Addr`

error[E0277]: the trait bound `CasbinActor&lt;CachedEnforcer&gt;: Actor` is not satisfied
  --&gt; actix-middleware-example/src/services/account_service.rs:24:22
   |
24 |     actor: web::Data&lt;Addr&lt;CasbinActor&lt;CachedEnforcer&gt;&gt;&gt;,
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Actor` is not implemented for `CasbinActor&lt;CachedEnforcer&gt;`
   |
   = help: the following other types implement trait `Actor`:
             Mocker&lt;T&gt;
             SyncArbiter&lt;A&gt;
note: required by a bound in `Addr`
  --&gt; /Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-0.11.1/src/address/mod.rs:77:20
   |
77 | pub struct Addr&lt;A: Actor&gt; {
   |                    ^^^^^ required by this bound in `Addr`

For more information about this error, try `rustc --explain E0277`.
error: could not compile `actix-middleware-example` due to 3 previous errors
</code></pre><p>The cargo fetches the dependency versions from the crates.io. Since the actix-casbin-auth and actix-casbin are not released in a while, hence there are two versions of some depedencies(one from actix-casbin-auth/actix-casbin and other from the Cargo.toml). Following are some examples:</p>
<p><img src="/img/week3n4/actix.png" alt="Image alt"></p>
<p><img src="/img/week3n4/actix-rt.png" alt="Image alt"></p>
<p><img src="/img/week3n4/tokio.png" alt="Image alt"></p>
<p>Overriding the dependencies resolved the version conflicts. I encountered some errors due to upgrade in the version of the dependencies but those were resolved after refering to official documents and some github discussions.</p>
<h3 id="ci-for-axum-middleware">CI for Axum middleware</h3>
<p>Adding CI to enable github actions was the next task after adding the core code for the Axum middleware. I had <code>actix-casbin-auth</code> for reference and following commands were included in the CI.yml</p>
<ul>
<li><code>cargo build --verbose</code></li>
<li><code>cargo clippy -- -D warnings</code></li>
<li><code>cargo fmt --all -- --check</code></li>
</ul>
<p>I have added <code>Swatinem/rust-cache@v1</code> in order to build from cache. More information about it can be found <a href="https://github.com/Swatinem/rust-cache">here</a></p>
<p>Following result was observed</p>
<p><img src="/img/week3n4/citest.png" alt="Image alt"></p>
<h3 id="add-tests-and-examples-to-axum-casbin-auth">Add tests and examples to axum-casbin-auth</h3>
<p>Used <code>actix-casbin-auth</code> as reference. It had three tests:</p>
<ul>
<li>test_middleware.rs: test basic middleware function</li>
<li>test_middleware_domain.rs: test middleware function with domain</li>
<li>test_set_enforcer.rs: test initializing middleware using <code>set_enforcer()</code></li>
</ul>
<p>We first implement a FakeAuthLayer which is used to insert subject and domain in <code>CasbinVals</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">call</span>(<span style="color:#f92672">&amp;</span>self, req: <span style="color:#a6e22e">ServiceRequest</span>) -&gt; <span style="color:#a6e22e">Self</span>::Future {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> svc <span style="color:#f92672">=</span> self.service.clone();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Box::pin(<span style="color:#66d9ef">async</span> <span style="color:#66d9ef">move</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> vals <span style="color:#f92672">=</span> CasbinVals {
</span></span><span style="display:flex;"><span>                subject: String::from(<span style="color:#e6db74">&#34;alice&#34;</span>),
</span></span><span style="display:flex;"><span>                domain: Option::from(String::from(<span style="color:#e6db74">&#34;domain1&#34;</span>)),
</span></span><span style="display:flex;"><span>            };
</span></span><span style="display:flex;"><span>            req.extensions_mut().insert(vals);
</span></span><span style="display:flex;"><span>            svc.call(req).<span style="color:#66d9ef">await</span>
</span></span><span style="display:flex;"><span>        })
</span></span></code></pre></div><p>Endpoints in FakeAuthLayer and Casbin are wrapped using <code>layer</code> in Axum.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> app <span style="color:#f92672">=</span> Router::new()
</span></span><span style="display:flex;"><span>        .route(<span style="color:#e6db74">&#34;/pen/1&#34;</span>, get(handler))
</span></span><span style="display:flex;"><span>        .route(<span style="color:#e6db74">&#34;/pen/2&#34;</span>, get(handler))
</span></span><span style="display:flex;"><span>        .route(<span style="color:#e6db74">&#34;/book/:id&#34;</span>, get(handler))
</span></span><span style="display:flex;"><span>        .layer(casbin_middleware)
</span></span><span style="display:flex;"><span>        .layer(FakeAuthLayer);
</span></span></code></pre></div><p>Axum web framework don&rsquo;t have its own TestClient unlike Poem and actix-web. Hence I had to use <code>axum_test_helper::TestClient</code>.
Axum test looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">use</span> axum::{response::Response, routing::get, BoxError, Router};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> axum_test_helper::TestClient;
</span></span><span style="display:flex;"><span><span style="color:#75715e">//...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> app <span style="color:#f92672">=</span> Router::new()
</span></span><span style="display:flex;"><span>        .route(<span style="color:#e6db74">&#34;/pen/1&#34;</span>, get(handler))
</span></span><span style="display:flex;"><span>        .route(<span style="color:#e6db74">&#34;/pen/2&#34;</span>, get(handler))
</span></span><span style="display:flex;"><span>        .route(<span style="color:#e6db74">&#34;/book/:id&#34;</span>, get(handler))
</span></span><span style="display:flex;"><span>        .layer(casbin_middleware) <span style="color:#75715e">// casbin_middleware preceeds FakeAuthLayer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        .layer(FakeAuthLayer);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> client <span style="color:#f92672">=</span> TestClient::new(app);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> resp_pen_1 <span style="color:#f92672">=</span> client.get(<span style="color:#e6db74">&#34;/pen/1&#34;</span>).send().<span style="color:#66d9ef">await</span>;
</span></span><span style="display:flex;"><span>    assert_eq!(resp_pen_1.status(), StatusCode::OK);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> resp_book <span style="color:#f92672">=</span> client.get(<span style="color:#e6db74">&#34;/book/2&#34;</span>).send().<span style="color:#66d9ef">await</span>;
</span></span><span style="display:flex;"><span>    assert_eq!(resp_book.status(), StatusCode::OK);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> resp_pen_2 <span style="color:#f92672">=</span> client.get(<span style="color:#e6db74">&#34;/pen/2&#34;</span>).send().<span style="color:#66d9ef">await</span>;
</span></span><span style="display:flex;"><span>    assert_eq!(resp_pen_2.status(), StatusCode::FORBIDDEN);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Github repository of axum-casbin-auth can be found <a href="https://github.com/casbin-rs/axum-casbin-auth">here</a></p>
<h3 id="target-for-next-week">Target for Next week</h3>
<ol>
<li>casbin-rs/examples: resolve error due to simultaneous use of <code>tokio</code> and <code>async-std</code> \</li>
<li>Establish a real world example using axum-casbin-auth.</li>
</ol>
]]></content>
        </item>
        
    </channel>
</rss>
